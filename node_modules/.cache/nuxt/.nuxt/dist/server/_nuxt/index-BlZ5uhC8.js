import { defineComponent, computed, mergeProps, unref, useSSRContext, ref, readonly, watch } from "vue";
import { ssrRenderAttrs, ssrInterpolate, ssrRenderAttr, ssrRenderClass, ssrIncludeBooleanAttr, ssrRenderComponent, ssrRenderList, ssrLooseContain, ssrLooseEqual } from "vue/server-renderer";
import { _ as _export_sfc } from "./_plugin-vue_export-helper-1tPrXgE0.js";
import { defineStore } from "pinia";
const _sfc_main$c = /* @__PURE__ */ defineComponent({
  __name: "BaseButton",
  __ssrInlineRender: true,
  props: {
    text: { default: "Botão" },
    icon: { default: "" },
    variant: { default: "primary" },
    size: { default: "medium" },
    loading: { type: Boolean, default: false },
    disabled: { type: Boolean, default: false },
    showText: { type: Boolean, default: true },
    fullWidth: { type: Boolean, default: false }
  },
  emits: ["click"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const buttonClasses = computed(() => [
      "base-button",
      `base-button--${props.variant}`,
      `base-button--${props.size}`,
      {
        "base-button--loading": props.loading,
        "base-button--disabled": props.disabled,
        "base-button--full-width": props.fullWidth
      }
    ]);
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<button${ssrRenderAttrs(mergeProps({
        class: unref(buttonClasses),
        disabled: _ctx.disabled || _ctx.loading,
        type: "button"
      }, _attrs))} data-v-dff6e078>`);
      if (_ctx.loading) {
        _push(`<div class="base-button__loading" data-v-dff6e078><div class="spinner" data-v-dff6e078></div></div>`);
      } else {
        _push(`<i class="material-icons" data-v-dff6e078>${ssrInterpolate(_ctx.icon)}</i>`);
      }
      if (_ctx.showText) {
        _push(`<span data-v-dff6e078>${ssrInterpolate(_ctx.text)}</span>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</button>`);
    };
  }
});
const _sfc_setup$c = _sfc_main$c.setup;
_sfc_main$c.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/BaseButton.vue");
  return _sfc_setup$c ? _sfc_setup$c(props, ctx) : void 0;
};
const __nuxt_component_0$2 = /* @__PURE__ */ Object.assign(_export_sfc(_sfc_main$c, [["__scopeId", "data-v-dff6e078"]]), { __name: "BaseButton" });
const usePriceMask = () => {
  const formatPrice = (value) => {
    if (value === 0) return "Grátis";
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(value / 100);
  };
  const formatPriceInput = (value) => {
    if (value === 0) return "";
    return new Intl.NumberFormat("pt-BR", {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(value / 100);
  };
  const extractPriceValue = (formattedValue) => {
    const cleanValue = formattedValue.replace(/[^\d,]/g, "");
    const numericValue = cleanValue.replace(",", ".");
    const parsedValue = parseFloat(numericValue || "0");
    return Math.round(parsedValue * 100);
  };
  const applyPriceMask = (value) => {
    const numbers = value.replace(/\D/g, "");
    if (numbers.length === 0) return "";
    const cents = parseInt(numbers);
    const formatted = new Intl.NumberFormat("pt-BR", {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(cents / 100);
    return formatted;
  };
  const handlePriceInput = (event, updateValue, defaultValue = 0) => {
    const target = event.target;
    const value = target.value;
    if (!value.trim()) {
      updateValue(defaultValue);
      target.value = "";
      return;
    }
    const maskedValue = applyPriceMask(value);
    target.value = maskedValue;
    const numericValue = extractPriceValue(maskedValue);
    updateValue(numericValue);
  };
  return {
    formatPrice,
    formatPriceInput,
    extractPriceValue,
    applyPriceMask,
    handlePriceInput
  };
};
const _sfc_main$b = /* @__PURE__ */ defineComponent({
  __name: "PriceInput",
  __ssrInlineRender: true,
  props: {
    modelValue: {},
    label: { default: "" },
    placeholder: { default: "R$ 0,00" },
    inputClass: { default: "" },
    disabled: { type: Boolean, default: false },
    min: { default: 0 },
    max: { default: 1e6 }
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const { formatPriceInput } = usePriceMask();
    const formattedValue = computed(() => {
      return formatPriceInput(props.modelValue);
    });
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "price-input" }, _attrs))} data-v-0ec55cb9>`);
      if (_ctx.label) {
        _push(`<label class="price-input__label" data-v-0ec55cb9>${ssrInterpolate(_ctx.label)}</label>`);
      } else {
        _push(`<!---->`);
      }
      _push(`<input type="text"${ssrRenderAttr("value", unref(formattedValue))}${ssrRenderAttr("placeholder", _ctx.placeholder)} class="${ssrRenderClass(["price-input__field", _ctx.inputClass])}"${ssrIncludeBooleanAttr(_ctx.disabled) ? " disabled" : ""} data-v-0ec55cb9></div>`);
    };
  }
});
const _sfc_setup$b = _sfc_main$b.setup;
_sfc_main$b.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/PriceInput.vue");
  return _sfc_setup$b ? _sfc_setup$b(props, ctx) : void 0;
};
const PriceInput = /* @__PURE__ */ Object.assign(_export_sfc(_sfc_main$b, [["__scopeId", "data-v-0ec55cb9"]]), { __name: "PriceInput" });
const API_BASE_URL = "http://localhost:3001/api";
const useHotelsStore = defineStore("hotels", () => {
  const hotels = ref([]);
  const places = ref([]);
  const amenities = ref([]);
  const loading = ref(false);
  const error = ref(null);
  const pagination = ref({
    total: 0,
    offset: 0,
    limit: 10,
    hasMore: false,
    currentPage: 1,
    totalPages: 0
  });
  const isLoadingMore = ref(false);
  const hasInitialLoad = ref(false);
  const filters = ref({
    minPrice: 0,
    maxPrice: 1e6,
    stars: [],
    amenities: [],
    hasBreakFast: null,
    hasRefundableRoom: null,
    placeId: null,
    searchQuery: ""
  });
  const sortBy = ref({
    key: "totalPrice",
    label: "Preço",
    direction: "asc"
  });
  const stats = ref({
    total: 0,
    priceRange: { min: 0, max: 0 },
    avgPrice: 0,
    starsDistribution: {},
    amenitiesCount: {}
  });
  const selectedHotel = ref(null);
  const isDrawerOpen = ref(false);
  const citySearchQuery = ref("");
  const citySearchResults = ref([]);
  const citySearchLoading = ref(false);
  const citySearchError = ref(null);
  const citySearchCache = ref(/* @__PURE__ */ new Map());
  const citySearchDebounceTimer = ref(null);
  const filteredHotels = computed(() => {
    let result = [...hotels.value];
    if (filters.value.searchQuery.trim()) {
      const query = filters.value.searchQuery.toLowerCase();
      result = result.filter(
        (hotel) => hotel.name.toLowerCase().includes(query) || hotel.district.toLowerCase().includes(query) || getPlaceName(hotel.placeId).toLowerCase().includes(query)
      );
    }
    result = result.filter(
      (hotel) => hotel.totalPrice >= filters.value.minPrice && hotel.totalPrice <= filters.value.maxPrice
    );
    if (filters.value.stars.length > 0) {
      result = result.filter(
        (hotel) => filters.value.stars.includes(hotel.stars)
      );
    }
    if (filters.value.amenities.length > 0) {
      result = result.filter(
        (hotel) => filters.value.amenities.every(
          (amenity) => hotel.amenities.includes(amenity)
        )
      );
    }
    if (filters.value.hasBreakFast !== null) {
      result = result.filter(
        (hotel) => hotel.hasBreakFast === filters.value.hasBreakFast
      );
    }
    if (filters.value.hasRefundableRoom !== null) {
      result = result.filter(
        (hotel) => hotel.hasRefundableRoom === filters.value.hasRefundableRoom
      );
    }
    if (filters.value.placeId !== null) {
      result = result.filter(
        (hotel) => hotel.placeId === filters.value.placeId
      );
    }
    result.sort((a, b) => {
      const { key, direction } = sortBy.value;
      if (key === "totalPrice") {
        return direction === "asc" ? a.totalPrice - b.totalPrice : b.totalPrice - a.totalPrice;
      } else if (key === "stars") {
        return direction === "asc" ? parseInt(a.stars) - parseInt(b.stars) : parseInt(b.stars) - parseInt(a.stars);
      } else if (key === "name") {
        return direction === "asc" ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name);
      }
      return 0;
    });
    return result;
  });
  const filteredStats = computed(() => {
    const total = hotels.value.length;
    const avgPrice = total > 0 ? Math.round(hotels.value.reduce((sum, h) => sum + h.totalPrice, 0) / total) : 0;
    const priceRange = total > 0 ? {
      min: Math.min(...hotels.value.map((h) => h.totalPrice)),
      max: Math.max(...hotels.value.map((h) => h.totalPrice))
    } : { min: 0, max: 0 };
    return { total, avgPrice, priceRange };
  });
  const hasActiveFilters = computed(() => {
    return filters.value.minPrice > 0 || filters.value.maxPrice < 1e6 || filters.value.stars.length > 0 || filters.value.amenities.length > 0 || filters.value.hasBreakFast !== null || filters.value.hasRefundableRoom !== null || filters.value.placeId !== null || filters.value.searchQuery.trim() !== "";
  });
  const activeFiltersCount = computed(() => {
    let count = 0;
    if (filters.value.minPrice > 0 || filters.value.maxPrice < 1e6) count++;
    if (filters.value.stars.length > 0) count++;
    if (filters.value.amenities.length > 0) count++;
    if (filters.value.hasBreakFast !== null) count++;
    if (filters.value.hasRefundableRoom !== null) count++;
    if (filters.value.placeId !== null) count++;
    if (filters.value.searchQuery.trim() !== "") count++;
    return count;
  });
  const hotelsByStars = computed(() => {
    const grouped = hotels.value.reduce((acc, hotel) => {
      const stars = hotel.stars;
      if (!acc[stars]) acc[stars] = [];
      acc[stars].push(hotel);
      return acc;
    }, {});
    return grouped;
  });
  const hotelsByPlace = computed(() => {
    const grouped = hotels.value.reduce((acc, hotel) => {
      const placeName = getPlaceName(hotel.placeId);
      if (!acc[placeName]) acc[placeName] = [];
      acc[placeName].push(hotel);
      return acc;
    }, {});
    return grouped;
  });
  const priceStats = computed(() => {
    if (hotels.value.length === 0) {
      return { min: 0, max: 0, avg: 0, median: 0 };
    }
    const prices = hotels.value.map((h) => h.totalPrice).sort((a, b) => a - b);
    const min = prices[0];
    const max = prices[prices.length - 1];
    const avg = Math.round(prices.reduce((sum, price) => sum + price, 0) / prices.length);
    const median = prices[Math.floor(prices.length / 2)];
    return { min, max, avg, median };
  });
  const formattedCityResults = computed(() => {
    return citySearchResults.value.map((city) => ({
      ...city,
      displayName: `${city.name}, ${city.state.shortname}`,
      fullName: `${city.name}, ${city.state.name}`
    }));
  });
  const hasCitySearchResults = computed(() => citySearchResults.value.length > 0);
  const shouldShowCitySearch = computed(() => citySearchQuery.value.length >= 3);
  const extractData = (response) => {
    if (response && typeof response === "object" && "success" in response && "data" in response) {
      return response.data;
    }
    return response;
  };
  const formatPrice = (price) => {
    return new Intl.NumberFormat("pt-BR", {
      style: "currency",
      currency: "BRL"
    }).format(price / 100);
  };
  const getAmenityLabel = (key) => {
    const amenityMap = {
      "WI_FI": "Wi-fi grátis",
      "PARKING": "Estacionamento",
      "POOL": "Piscina",
      "RESTAURANT": "Restaurante",
      "FITNESS_CENTER": "Academia",
      "ROOM_SERVICE": "Serviço de quarto",
      "STEAM_ROOM": "Sauna",
      "PET_FRIENDLY": "Aceita pets",
      "BAR": "Bar",
      "SPA": "Spa",
      "ACCESSIBILITY": "Acessibilidade",
      "AIR_CONDITIONING": "Ar-condicionado"
    };
    return amenityMap[key] || key;
  };
  const getPlaceName = (placeId) => {
    const place = places.value.find((p) => p.id === placeId);
    return place ? `${place.name}, ${place.state}` : "Local não encontrado";
  };
  const buildQueryParams = (filters2, sortBy2, offset, limit) => {
    const params = new URLSearchParams();
    if (filters2.searchQuery) params.append("q", filters2.searchQuery);
    if (filters2.minPrice > 0) params.append("minPrice", filters2.minPrice.toString());
    if (filters2.maxPrice < 1e6) params.append("maxPrice", filters2.maxPrice.toString());
    if (filters2.stars.length > 0) params.append("stars", filters2.stars.join(","));
    if (filters2.amenities.length > 0) params.append("amenities", filters2.amenities.join(","));
    if (filters2.hasBreakFast !== null) params.append("hasBreakFast", filters2.hasBreakFast.toString());
    if (filters2.hasRefundableRoom !== null) params.append("hasRefundableRoom", filters2.hasRefundableRoom.toString());
    if (filters2.placeId) params.append("placeId", filters2.placeId.toString());
    if (sortBy2.key) params.append("sortBy", sortBy2.key);
    if (sortBy2.direction) params.append("sortOrder", sortBy2.direction);
    if (offset !== void 0) params.append("offset", offset.toString());
    if (limit !== void 0) params.append("limit", limit.toString());
    return params;
  };
  const apiRequest = async (endpoint, options) => {
    try {
      const url = `${API_BASE_URL}${endpoint}`;
      const response = await fetch(url, {
        headers: {
          "Content-Type": "application/json"
        },
        ...options
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data = await response.json();
      return data;
    } catch (err) {
      console.error("API request failed:", err);
      throw err;
    }
  };
  const loadMoreHotels = async () => {
    if (isLoadingMore.value || !pagination.value.hasMore) return;
    isLoadingMore.value = true;
    pagination.value.offset += pagination.value.limit;
    try {
      await fetchFilteredHotels(false);
    } catch (err) {
      pagination.value.offset -= pagination.value.limit;
      console.error("Error loading more hotels:", err);
    } finally {
      isLoadingMore.value = false;
    }
  };
  const goToPage = async (page) => {
    if (page < 1 || page > pagination.value.totalPages) return;
    const offset = (page - 1) * pagination.value.limit;
    pagination.value.offset = offset;
    pagination.value.currentPage = page;
    await fetchFilteredHotels(false);
  };
  const resetPagination = () => {
    pagination.value = {
      total: 0,
      offset: 0,
      limit: 10,
      hasMore: false,
      currentPage: 1,
      totalPages: 0
    };
    hotels.value = [];
    hasInitialLoad.value = false;
  };
  const updateItemsPerPage = async (newLimit) => {
    pagination.value.limit = newLimit;
    pagination.value.offset = 0;
    pagination.value.currentPage = 1;
    hotels.value = [];
    await fetchFilteredHotels(false);
  };
  const fetchInitialData = async () => {
    loading.value = true;
    error.value = null;
    try {
      const [placesResponse, amenitiesResponse, statsResponse] = await Promise.all([
        apiRequest("/places"),
        apiRequest("/amenities"),
        apiRequest("/hotels/stats")
      ]);
      places.value = extractData(placesResponse);
      amenities.value = extractData(amenitiesResponse);
      stats.value = extractData(statsResponse);
      await fetchFilteredHotels();
    } catch (err) {
      error.value = "Erro ao carregar dados iniciais";
      console.error("Error fetching initial data:", err);
    } finally {
      loading.value = false;
    }
  };
  const fetchFilteredHotels = async (resetPagination2 = true) => {
    if (resetPagination2) {
      pagination.value.offset = 0;
      pagination.value.currentPage = 1;
      hotels.value = [];
    }
    loading.value = true;
    error.value = null;
    try {
      const params = buildQueryParams(
        filters.value,
        sortBy.value,
        pagination.value.offset,
        pagination.value.limit
      );
      const response = await apiRequest(`/hotels/filtered?${params}`);
      const data = extractData(response);
      if (resetPagination2) {
        hotels.value = data.hotels;
      } else {
        hotels.value = [...hotels.value, ...data.hotels];
      }
      const responseData = data;
      if (responseData.pagination) {
        pagination.value = {
          ...responseData.pagination,
          currentPage: Math.floor(responseData.pagination.offset / responseData.pagination.limit) + 1,
          totalPages: Math.ceil(responseData.pagination.total / responseData.pagination.limit)
        };
      }
      hasInitialLoad.value = true;
    } catch (err) {
      error.value = "Erro ao carregar hotéis";
      console.error("Error fetching filtered hotels:", err);
    } finally {
      loading.value = false;
    }
  };
  const fetchHotels = async () => {
    await fetchFilteredHotels();
  };
  const fetchStats = async () => {
    try {
      const response = await apiRequest("/hotels/stats");
      stats.value = extractData(response);
    } catch (err) {
      console.error("Error fetching stats:", err);
    }
  };
  const updateFilters = (newFilters) => {
    filters.value = { ...filters.value, ...newFilters };
    resetPagination();
    debouncedFetchHotels();
  };
  const updatePriceFilter = (minPrice, maxPrice) => {
    filters.value.minPrice = minPrice;
    filters.value.maxPrice = maxPrice;
    resetPagination();
    debouncedFetchHotels();
  };
  const updateStarsFilter = (stars) => {
    filters.value.stars = stars;
    resetPagination();
    debouncedFetchHotels();
  };
  const updateAmenitiesFilter = (amenities2) => {
    filters.value.amenities = amenities2;
    resetPagination();
    debouncedFetchHotels();
  };
  const updateBreakfastFilter = (hasBreakFast) => {
    filters.value.hasBreakFast = hasBreakFast;
    resetPagination();
    debouncedFetchHotels();
  };
  const updateRefundableFilter = (hasRefundableRoom) => {
    filters.value.hasRefundableRoom = hasRefundableRoom;
    resetPagination();
    debouncedFetchHotels();
  };
  const updatePlaceFilter = (placeId) => {
    filters.value.placeId = placeId;
    resetPagination();
    debouncedFetchHotels();
  };
  const updateSearchQuery = (searchQuery) => {
    filters.value.searchQuery = searchQuery;
    resetPagination();
    debouncedFetchHotels();
  };
  const addStarFilter = (star) => {
    if (!filters.value.stars.includes(star)) {
      filters.value.stars.push(star);
      debouncedFetchHotels();
    }
  };
  const removeStarFilter = (star) => {
    filters.value.stars = filters.value.stars.filter((s) => s !== star);
    debouncedFetchHotels();
  };
  const addAmenityFilter = (amenity) => {
    if (!filters.value.amenities.includes(amenity)) {
      filters.value.amenities.push(amenity);
      debouncedFetchHotels();
    }
  };
  const removeAmenityFilter = (amenity) => {
    filters.value.amenities = filters.value.amenities.filter((a) => a !== amenity);
    debouncedFetchHotels();
  };
  const updateSort = (newSort) => {
    sortBy.value = newSort;
    resetPagination();
    fetchFilteredHotels();
  };
  const sortByPrice = (direction = "asc") => {
    sortBy.value = { key: "totalPrice", label: "Preço", direction };
    fetchFilteredHotels();
  };
  const sortByStars = (direction = "desc") => {
    sortBy.value = { key: "stars", label: "Classificação", direction };
    fetchFilteredHotels();
  };
  const sortByName = (direction = "asc") => {
    sortBy.value = { key: "name", label: "Nome", direction };
    fetchFilteredHotels();
  };
  const resetFilters = () => {
    filters.value = {
      minPrice: 0,
      maxPrice: 1e6,
      stars: [],
      amenities: [],
      hasBreakFast: null,
      hasRefundableRoom: null,
      placeId: null,
      searchQuery: ""
    };
    resetPagination();
    fetchFilteredHotels();
  };
  const resetPriceFilter = () => {
    filters.value.minPrice = 0;
    filters.value.maxPrice = 1e6;
    debouncedFetchHotels();
  };
  const resetStarsFilter = () => {
    filters.value.stars = [];
    debouncedFetchHotels();
  };
  const resetAmenitiesFilter = () => {
    filters.value.amenities = [];
    debouncedFetchHotels();
  };
  const resetSearchQuery = () => {
    filters.value.searchQuery = "";
    debouncedFetchHotels();
  };
  let debounceTimer = null;
  const debouncedFetchHotels = () => {
    if (debounceTimer) clearTimeout(debounceTimer);
    debounceTimer = setTimeout(() => {
      fetchFilteredHotels(true);
    }, 300);
  };
  const searchCities = async (query) => {
    if (query.length < 3) {
      citySearchResults.value = [];
      return;
    }
    if (citySearchCache.value.has(query)) {
      citySearchResults.value = citySearchCache.value.get(query) || [];
      return;
    }
    citySearchLoading.value = true;
    citySearchError.value = null;
    try {
      const response = await apiRequest(`/cities?name_like=${encodeURIComponent(query)}`);
      const data = extractData(response);
      citySearchResults.value = data;
      citySearchCache.value.set(query, data);
    } catch (err) {
      citySearchError.value = "Erro ao buscar cidades";
      console.error("Error searching cities:", err);
    } finally {
      citySearchLoading.value = false;
    }
  };
  const selectCity = (city) => {
    updateFilters({ placeId: city.placeId, searchQuery: "" });
    citySearchQuery.value = "";
    citySearchResults.value = [];
  };
  const updateCitySearchQuery = (query) => {
    citySearchQuery.value = query;
    if (citySearchDebounceTimer.value) {
      clearTimeout(citySearchDebounceTimer.value);
    }
    citySearchDebounceTimer.value = setTimeout(() => {
      searchCities(query);
    }, 300);
  };
  const clearCitySearch = () => {
    citySearchQuery.value = "";
    citySearchResults.value = [];
    citySearchError.value = null;
    if (citySearchDebounceTimer.value) {
      clearTimeout(citySearchDebounceTimer.value);
    }
  };
  const searchHotels = async (query) => {
    updateFilters({ searchQuery: query });
    try {
      const params = new URLSearchParams();
      if (query.trim()) {
        params.append("q", query.trim());
      }
      const response = await apiRequest(`/hotels/search?${params}`);
      if (response.success && response.data) {
        hotels.value = response.data;
      } else {
        hotels.value = [];
      }
    } catch (err) {
      console.error("Erro na busca:", err);
      performLocalSearch(query);
    }
  };
  const performLocalSearch = (query) => {
    const searchTerm = query.toLowerCase();
    const filteredHotels2 = hotels.value.filter((hotel) => {
      const hotelName = hotel.name.toLowerCase();
      const district = hotel.district.toLowerCase();
      const place = getPlaceName(hotel.placeId).toLowerCase();
      return hotelName.includes(searchTerm) || district.includes(searchTerm) || place.includes(searchTerm);
    });
    hotels.value = filteredHotels2;
  };
  const openHotelDrawer = async (hotel) => {
    console.log("Store - openHotelDrawer chamado com hotel:", hotel);
    console.log("Store - hotel.id:", hotel.id);
    try {
      console.log("Store - buscando detalhes do hotel...");
      const hotelDetails = await fetchHotelById(hotel.id);
      console.log("Store - hotelDetails recebido:", hotelDetails);
      console.log("Store - hotelDetails.images:", hotelDetails.images);
      selectedHotel.value = hotelDetails;
      isDrawerOpen.value = true;
      console.log("Store - drawer aberto com sucesso");
      console.log("Store - selectedHotel.value:", selectedHotel.value);
      console.log("Store - selectedHotel.value.thumb:", selectedHotel.value?.thumb);
      console.log("Store - isDrawerOpen.value:", isDrawerOpen.value);
    } catch (error2) {
      console.error("Erro ao abrir drawer:", error2);
      console.log("Store - usando fallback com hotel básico");
      selectedHotel.value = hotel;
      isDrawerOpen.value = true;
    }
  };
  const closeHotelDrawer = () => {
    selectedHotel.value = null;
    isDrawerOpen.value = false;
  };
  const fetchHotelById = async (id) => {
    console.log("Store - fetchHotelById chamado com id:", id);
    try {
      const response = await apiRequest(`/hotels/${id}`);
      console.log("Store - response da API:", response);
      const hotel = extractData(response);
      console.log("Store - hotel após extractData:", hotel);
      if (!hotel.images) {
        console.log("Store - hotel não tem images, usando fallback");
        hotel.images = [hotel.thumb];
      }
      console.log("Store - hotel final:", hotel);
      return hotel;
    } catch (error2) {
      console.error("Erro ao buscar hotel por ID:", error2);
      throw error2;
    }
  };
  const getHotelDetails = async (id) => {
    try {
      return await fetchHotelById(id);
    } catch (error2) {
      console.error("Erro ao obter detalhes do hotel:", error2);
      return null;
    }
  };
  const getHotelById = (id) => {
    return hotels.value.find((hotel) => hotel.id === id);
  };
  const getHotelsByPlace = (placeId) => {
    return hotels.value.filter((hotel) => hotel.placeId === placeId);
  };
  const getHotelsByStars = (stars) => {
    return hotels.value.filter((hotel) => hotel.stars === stars);
  };
  const getHotelsByPriceRange = (min, max) => {
    return hotels.value.filter(
      (hotel) => hotel.totalPrice >= min && hotel.totalPrice <= max
    );
  };
  const getHotelsWithAmenity = (amenity) => {
    return hotels.value.filter((hotel) => hotel.amenities.includes(amenity));
  };
  return {
    // State
    hotels,
    places: readonly(places),
    amenities: readonly(amenities),
    loading: readonly(loading),
    error: readonly(error),
    filters,
    sortBy: readonly(sortBy),
    stats: readonly(stats),
    selectedHotel: readonly(selectedHotel),
    isDrawerOpen: readonly(isDrawerOpen),
    // Pagination State
    pagination: readonly(pagination),
    isLoadingMore: readonly(isLoadingMore),
    hasInitialLoad: readonly(hasInitialLoad),
    // Computed
    filteredHotels,
    filteredStats,
    hasActiveFilters,
    activeFiltersCount,
    hotelsByStars,
    hotelsByPlace,
    priceStats,
    // Actions - Filtros
    updateFilters,
    updatePriceFilter,
    updateStarsFilter,
    updateAmenitiesFilter,
    updateBreakfastFilter,
    updateRefundableFilter,
    updatePlaceFilter,
    updateSearchQuery,
    addStarFilter,
    removeStarFilter,
    addAmenityFilter,
    removeAmenityFilter,
    // Actions - Ordenação
    updateSort,
    sortByPrice,
    sortByStars,
    sortByName,
    // Actions - Reset
    resetFilters,
    resetPriceFilter,
    resetStarsFilter,
    resetAmenitiesFilter,
    resetSearchQuery,
    // Actions - API
    fetchInitialData,
    fetchHotels,
    fetchStats,
    searchHotels,
    performLocalSearch,
    // Actions - Drawer
    openHotelDrawer,
    closeHotelDrawer,
    // Actions - Hotel Details
    fetchHotelById,
    getHotelDetails,
    // Actions - Utilitários
    getHotelById,
    getHotelsByPlace,
    getHotelsByStars,
    getHotelsByPriceRange,
    getHotelsWithAmenity,
    // Actions - Paginação
    loadMoreHotels,
    goToPage,
    resetPagination,
    updateItemsPerPage,
    // Utilities
    formatPrice,
    getAmenityLabel,
    getPlaceName,
    // City Search
    citySearchQuery: readonly(citySearchQuery),
    citySearchResults: readonly(citySearchResults),
    citySearchLoading: readonly(citySearchLoading),
    citySearchError: readonly(citySearchError),
    formattedCityResults: readonly(formattedCityResults),
    hasCitySearchResults: readonly(hasCitySearchResults),
    shouldShowCitySearch: readonly(shouldShowCitySearch),
    updateCitySearchQuery,
    clearCitySearch,
    selectCity
  };
});
const _sfc_main$a = /* @__PURE__ */ defineComponent({
  __name: "FilterDropdown",
  __ssrInlineRender: true,
  setup(__props) {
    const store = useHotelsStore();
    const {
      filters,
      amenities,
      updatePriceFilter,
      updateStarsFilter,
      updateAmenitiesFilter,
      updateBreakfastFilter,
      updateRefundableFilter,
      resetFilters
    } = store;
    const isOpen = ref(false);
    const localFilters = ref({ ...filters });
    watch(() => filters, (newFilters) => {
      localFilters.value = { ...newFilters };
    }, { deep: true });
    const activeFiltersCount = computed(() => {
      let count = 0;
      if (localFilters.value.minPrice > 0 || localFilters.value.maxPrice < 1e6) count++;
      if (localFilters.value.stars.length > 0) count++;
      if (localFilters.value.amenities.length > 0) count++;
      if (localFilters.value.hasBreakFast !== null) count++;
      if (localFilters.value.hasRefundableRoom !== null) count++;
      if (localFilters.value.placeId !== null) count++;
      if (localFilters.value.searchQuery.trim() !== "") count++;
      return count;
    });
    const updatePriceFilterHandler = () => {
      updatePriceFilter(localFilters.value.minPrice, localFilters.value.maxPrice);
    };
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "filter-dropdown" }, _attrs))}><button class="${ssrRenderClass(["filter-dropdown__trigger", { active: isOpen.value }])}" type="button"><i class="material-icons">tune</i><span>Filtros</span><i class="material-icons filter-dropdown__arrow">${ssrInterpolate(isOpen.value ? "expand_less" : "expand_more")}</i>`);
      if (activeFiltersCount.value > 0) {
        _push(`<span class="filter-dropdown__badge">${ssrInterpolate(activeFiltersCount.value)}</span>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</button>`);
      if (isOpen.value) {
        _push(`<div class="filter-dropdown__content"><div class="filter-dropdown__header"><h4>Filtros Avançados</h4><button class="filter-dropdown__reset"> Limpar </button></div><div class="filter-dropdown__body"><div class="filter-section"><h5 class="filter-section__title">Faixa de preço</h5><div class="filter-section__price-range">`);
        _push(ssrRenderComponent(PriceInput, {
          modelValue: localFilters.value.minPrice,
          "onUpdate:modelValue": [($event) => localFilters.value.minPrice = $event, updatePriceFilterHandler],
          label: "Mínimo",
          placeholder: "R$ 0,00"
        }, null, _parent));
        _push(ssrRenderComponent(PriceInput, {
          modelValue: localFilters.value.maxPrice,
          "onUpdate:modelValue": [($event) => localFilters.value.maxPrice = $event, updatePriceFilterHandler],
          label: "Máximo",
          placeholder: "R$ 10.000,00"
        }, null, _parent));
        _push(`</div></div><div class="filter-section"><h5 class="filter-section__title">Classificação</h5><div class="filter-section__stars"><!--[-->`);
        ssrRenderList(["5", "4", "3", "2", "1"], (star) => {
          _push(`<label class="filter-section__star-option"><input type="checkbox"${ssrRenderAttr("value", star)}${ssrIncludeBooleanAttr(Array.isArray(localFilters.value.stars) ? ssrLooseContain(localFilters.value.stars, star) : localFilters.value.stars) ? " checked" : ""} class="filter-section__checkbox"><span class="filter-section__star-label"><!--[-->`);
          ssrRenderList(parseInt(star), (i) => {
            _push(`<span class="filter-section__star">★</span>`);
          });
          _push(`<!--]-->`);
          if (parseInt(star) < 5) {
            _push(`<span><!--[-->`);
            ssrRenderList(5 - parseInt(star), (i) => {
              _push(`<span class="filter-section__star filter-section__star--empty">☆</span>`);
            });
            _push(`<!--]--></span>`);
          } else {
            _push(`<!---->`);
          }
          _push(`</span></label>`);
        });
        _push(`<!--]--></div></div><div class="filter-section"><h5 class="filter-section__title">Comodidades</h5><div class="filter-section__amenities"><!--[-->`);
        ssrRenderList(unref(amenities), (amenity) => {
          _push(`<label class="filter-section__amenity-option"><input type="checkbox"${ssrRenderAttr("value", amenity.key)}${ssrIncludeBooleanAttr(Array.isArray(localFilters.value.amenities) ? ssrLooseContain(localFilters.value.amenities, amenity.key) : localFilters.value.amenities) ? " checked" : ""} class="filter-section__checkbox"><span class="filter-section__amenity-label">${ssrInterpolate(amenity.label)}</span></label>`);
        });
        _push(`<!--]--></div></div><div class="filter-section"><h5 class="filter-section__title">Características</h5><div class="filter-section__features"><label class="filter-section__feature-option"><input type="checkbox"${ssrIncludeBooleanAttr(localFilters.value.hasBreakFast === true) ? " checked" : ""} class="filter-section__checkbox"><span class="filter-section__feature-label">Café da manhã</span></label><label class="filter-section__feature-option"><input type="checkbox"${ssrIncludeBooleanAttr(localFilters.value.hasRefundableRoom === true) ? " checked" : ""} class="filter-section__checkbox"><span class="filter-section__feature-label">Quarto reembolsável</span></label></div></div></div></div>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</div>`);
    };
  }
});
const _sfc_setup$a = _sfc_main$a.setup;
_sfc_main$a.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/FilterDropdown.vue");
  return _sfc_setup$a ? _sfc_setup$a(props, ctx) : void 0;
};
const __nuxt_component_1$1 = Object.assign(_sfc_main$a, { __name: "FilterDropdown" });
const _sfc_main$9 = /* @__PURE__ */ defineComponent({
  __name: "HotelHeader",
  __ssrInlineRender: true,
  props: {
    initialTab: { default: "hotel" },
    initialSearch: { default: "" }
  },
  emits: ["tabChange", "search"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const hotelsStore = useHotelsStore();
    const searchQuery = ref("");
    const isSearching = ref(false);
    const showSuggestions = ref(false);
    const selectedSuggestionIndex = ref(-1);
    const recentSearches = ref([]);
    const searchSuggestions = ref([]);
    const isGeneratingSuggestions = ref(false);
    computed(() => recentSearches.value.length > 0);
    computed(() => searchSuggestions.value.length > 0);
    const activeTab = ref(props.initialTab);
    const showQuickFilters = ref(true);
    const quickFilters = [
      { key: "breakfast", label: "Café da manhã", icon: "restaurant" },
      { key: "refundable", label: "Reembolsável", icon: "money_off" },
      { key: "5stars", label: "5 estrelas", icon: "star" },
      { key: "wifi", label: "Wi-Fi", icon: "wifi" },
      { key: "parking", label: "Estacionamento", icon: "local_parking" }
    ];
    const activeQuickFilters = ref([]);
    watch(() => hotelsStore.filters, (newFilters) => {
      const newActiveFilters = [];
      if (newFilters.hasBreakFast === true) {
        newActiveFilters.push("breakfast");
      }
      if (newFilters.hasRefundableRoom === true) {
        newActiveFilters.push("refundable");
      }
      if (newFilters.stars.includes("5")) {
        newActiveFilters.push("5stars");
      }
      if (newFilters.amenities.includes("WI_FI")) {
        newActiveFilters.push("wifi");
      }
      if (newFilters.amenities.includes("PARKING")) {
        newActiveFilters.push("parking");
      }
      activeQuickFilters.value = newActiveFilters;
    }, { deep: true });
    const tabs = [
      { name: "aereo", label: "Aéreo", icon: "material-icons" },
      { name: "hotel", label: "Hotel", icon: "material-icons" },
      { name: "carro", label: "Carro", icon: "material-icons" },
      { name: "onibus", label: "Ônibus", icon: "material-icons" }
    ];
    computed(() => activeQuickFilters.value.length > 0);
    const selectTab = (tabName) => {
      activeTab.value = tabName;
      emit("tabChange", tabName);
    };
    const addToRecentSearches = (search) => {
      const trimmed = search.trim();
      if (!trimmed) return;
      recentSearches.value = recentSearches.value.filter((s) => s !== trimmed);
      recentSearches.value.unshift(trimmed);
      if (recentSearches.value.length > 5) {
        recentSearches.value = recentSearches.value.slice(0, 5);
      }
      localStorage.setItem("recentHotelSearches", JSON.stringify(recentSearches.value));
    };
    const performSearch = async (query) => {
      if (!query.trim()) return;
      isSearching.value = true;
      addToRecentSearches(query);
      try {
        const placeSuggestion = searchSuggestions.value.find(
          (s) => s.type === "place" && s.name.toLowerCase().includes(query.toLowerCase())
        );
        if (placeSuggestion) {
          const placeId = parseInt(placeSuggestion.id.replace("place-", ""));
          hotelsStore.updateFilters({ placeId, searchQuery: "" });
        } else {
          await hotelsStore.searchHotels(query.trim());
        }
      } catch (error) {
        console.error("Erro na busca:", error);
      } finally {
        isSearching.value = false;
        showSuggestions.value = false;
      }
    };
    const getTabIcon = (tabName) => {
      const iconMap = {
        "aereo": "flight",
        "hotel": "hotel",
        "carro": "directions_car",
        "onibus": "directions_bus"
      };
      return iconMap[tabName] || "help";
    };
    const getSuggestionIcon = (type) => {
      const iconMap = {
        "hotel": "hotel",
        "place": "location_on",
        "city": "location_city"
      };
      return iconMap[type] || "search";
    };
    const getSuggestionIconClass = (type) => {
      const classMap = {
        "hotel": "icon-hotel",
        "place": "icon-place",
        "city": "icon-city"
      };
      return classMap[type] || "";
    };
    __expose({
      setActiveTab: selectTab,
      setSearchQuery: (query) => {
        searchQuery.value = query;
      }
    });
    return (_ctx, _push, _parent, _attrs) => {
      const _component_BaseButton = __nuxt_component_0$2;
      const _component_FilterDropdown = __nuxt_component_1$1;
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "search-header" }, _attrs))}><div class="tabs"><!--[-->`);
      ssrRenderList(tabs, (tab, index) => {
        _push(`<button class="${ssrRenderClass(["tab", { active: activeTab.value === tab.name }])}"><i class="${ssrRenderClass(tab.icon)}">${ssrInterpolate(getTabIcon(tab.name))}</i> ${ssrInterpolate(tab.label)}</button>`);
      });
      _push(`<!--]--></div>`);
      if (activeTab.value === "hotel") {
        _push(`<div class="search-container"><div class="search-bar"><div class="search-input-wrapper"><div class="input-icon"><svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></div><input${ssrRenderAttr("value", searchQuery.value)} type="text" placeholder="Buscar hotéis, destinos, cidades..." class="search-input" autocomplete="off">`);
        if (isSearching.value || unref(hotelsStore).citySearchLoading) {
          _push(`<div class="loading-spinner"><div class="spinner"></div></div>`);
        } else {
          _push(`<!---->`);
        }
        if (searchQuery.value && !isSearching.value) {
          _push(`<button class="clear-button" type="button"><svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></svg></button>`);
        } else {
          _push(`<!---->`);
        }
        _push(`</div>`);
        _push(ssrRenderComponent(_component_BaseButton, {
          text: "Buscar",
          icon: "search",
          loading: isSearching.value,
          disabled: !searchQuery.value.trim(),
          onClick: () => performSearch(searchQuery.value)
        }, null, _parent));
        _push(`</div>`);
        if (showQuickFilters.value) {
          _push(`<div class="quick-filters"><div class="filter-chips"><!--[-->`);
          ssrRenderList(quickFilters, (filter) => {
            _push(`<button class="${ssrRenderClass(["filter-chip", { active: activeQuickFilters.value.includes(filter.key) }])}"><i class="material-icons">${ssrInterpolate(filter.icon)}</i> ${ssrInterpolate(filter.label)}</button>`);
          });
          _push(`<!--]-->`);
          _push(ssrRenderComponent(_component_FilterDropdown, null, null, _parent));
          _push(`</div></div>`);
        } else {
          _push(`<!---->`);
        }
        if (showSuggestions.value) {
          _push(`<div class="suggestions-dropdown">`);
          if (recentSearches.value.length > 0 && !searchQuery.value) {
            _push(`<div class="suggestions-section"><div class="section-header"><span>Buscas recentes</span><button class="clear-recent">Limpar</button></div><div class="suggestions-list"><!--[-->`);
            ssrRenderList(recentSearches.value, (recent) => {
              _push(`<div class="suggestion-item"><i class="material-icons">history</i><span>${ssrInterpolate(recent)}</span></div>`);
            });
            _push(`<!--]--></div></div>`);
          } else {
            _push(`<!---->`);
          }
          if (searchQuery.value) {
            _push(`<div class="suggestions-section"><div class="section-header"><span>Hotéis, destinos e cidades</span></div><div class="suggestions-list">`);
            if (isGeneratingSuggestions.value || unref(hotelsStore).citySearchLoading) {
              _push(`<div class="loading-suggestions"><div class="spinner"></div><span>Buscando sugestões...</span></div>`);
            } else {
              _push(`<!---->`);
            }
            if (!isGeneratingSuggestions.value && !unref(hotelsStore).citySearchLoading && searchSuggestions.value.length > 0) {
              _push(`<!--[-->`);
              ssrRenderList(searchSuggestions.value, (suggestion, index) => {
                _push(`<div class="${ssrRenderClass(["suggestion-item", { selected: selectedSuggestionIndex.value === index }])}"><i class="${ssrRenderClass([getSuggestionIconClass(suggestion.type), "material-icons suggestion-icon"])}">${ssrInterpolate(getSuggestionIcon(suggestion.type))}</i><div class="suggestion-content"><span class="suggestion-name">${ssrInterpolate(suggestion.name)}</span><span class="suggestion-detail">${ssrInterpolate(suggestion.detail)}</span></div><div class="suggestion-action"><span class="${ssrRenderClass([suggestion.action, "action-badge"])}">${ssrInterpolate(suggestion.action === "filter" ? "Filtrar" : "Buscar")}</span></div></div>`);
              });
              _push(`<!--]-->`);
            } else {
              _push(`<!---->`);
            }
            if (!isGeneratingSuggestions.value && !unref(hotelsStore).citySearchLoading && unref(hotelsStore).formattedCityResults.length > 0) {
              _push(`<!--[-->`);
              ssrRenderList(unref(hotelsStore).formattedCityResults, (city, index) => {
                _push(`<div class="${ssrRenderClass(["suggestion-item", { selected: selectedSuggestionIndex.value === searchSuggestions.value.length + index }])}"><i class="material-icons suggestion-icon icon-city">location_city</i><div class="suggestion-content"><span class="suggestion-name">${ssrInterpolate(city.displayName)}</span><span class="suggestion-detail">Buscar hotéis em ${ssrInterpolate(city.name)}</span></div><div class="suggestion-action"><span class="action-badge search">Buscar</span></div></div>`);
              });
              _push(`<!--]-->`);
            } else {
              _push(`<!---->`);
            }
            if (!isGeneratingSuggestions.value && !unref(hotelsStore).citySearchLoading && searchSuggestions.value.length === 0 && unref(hotelsStore).formattedCityResults.length === 0) {
              _push(`<div class="empty-suggestions"><i class="material-icons">search_off</i><span>Nenhuma sugestão encontrada para &quot;${ssrInterpolate(searchQuery.value)}&quot;</span></div>`);
            } else {
              _push(`<!---->`);
            }
            _push(`</div></div>`);
          } else {
            _push(`<!---->`);
          }
          if (searchQuery.value && searchSuggestions.value.length === 0 && !isSearching.value) {
            _push(`<div class="suggestions-section"><div class="empty-suggestions"><i class="material-icons">search_off</i><span>Nenhum resultado encontrado para &quot;${ssrInterpolate(searchQuery.value)}&quot;</span>`);
            _push(ssrRenderComponent(_component_BaseButton, {
              variant: "outline",
              size: "small",
              text: "Buscar mesmo assim",
              onClick: () => performSearch(searchQuery.value)
            }, null, _parent));
            _push(`</div></div>`);
          } else {
            _push(`<!---->`);
          }
          _push(`</div>`);
        } else {
          _push(`<!---->`);
        }
        _push(`</div>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</div>`);
    };
  }
});
const _sfc_setup$9 = _sfc_main$9.setup;
_sfc_main$9.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/HotelHeader.vue");
  return _sfc_setup$9 ? _sfc_setup$9(props, ctx) : void 0;
};
const __nuxt_component_0$1 = Object.assign(_sfc_main$9, { __name: "HotelHeader" });
const _sfc_main$8 = /* @__PURE__ */ defineComponent({
  __name: "LoadingState",
  __ssrInlineRender: true,
  props: {
    message: { default: "Carregando..." }
  },
  setup(__props) {
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "loading" }, _attrs))}><div class="loading__spinner"></div><p>${ssrInterpolate(_ctx.message)}</p></div>`);
    };
  }
});
const _sfc_setup$8 = _sfc_main$8.setup;
_sfc_main$8.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/LoadingState.vue");
  return _sfc_setup$8 ? _sfc_setup$8(props, ctx) : void 0;
};
const __nuxt_component_1 = Object.assign(_sfc_main$8, { __name: "LoadingState" });
const _sfc_main$7 = /* @__PURE__ */ defineComponent({
  __name: "HotelCarousel",
  __ssrInlineRender: true,
  props: {
    images: {},
    alt: { default: "Imagem do hotel" },
    stars: {},
    height: { default: "280px" }
  },
  emits: ["image-change"],
  setup(__props, { expose: __expose, emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const currentImageIndex = ref(0);
    const currentImage = computed(() => {
      if (props.images.length === 0) {
        return "";
      }
      return props.images[currentImageIndex.value] || props.images[0] || "";
    });
    const nextImage = () => {
      if (currentImageIndex.value < props.images.length - 1) {
        currentImageIndex.value++;
        emit("image-change", currentImageIndex.value);
      }
    };
    const previousImage = () => {
      if (currentImageIndex.value > 0) {
        currentImageIndex.value--;
        emit("image-change", currentImageIndex.value);
      }
    };
    watch(() => props.images, () => {
      currentImageIndex.value = 0;
    }, { immediate: true });
    __expose({
      nextImage,
      previousImage,
      currentImageIndex: readonly(currentImageIndex)
    });
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "hotel-carousel" }, _attrs))}><div class="hotel-carousel__container"><img${ssrRenderAttr("src", unref(currentImage))}${ssrRenderAttr("alt", _ctx.alt)} class="hotel-carousel__image">`);
      if (_ctx.stars) {
        _push(`<div class="hotel-carousel__stars-badge"><!--[-->`);
        ssrRenderList(5, (star) => {
          _push(`<span class="hotel-carousel__star">`);
          if (star <= parseInt(_ctx.stars)) {
            _push(`<i class="material-icons">star</i>`);
          } else {
            _push(`<i class="material-icons">star_border</i>`);
          }
          _push(`</span>`);
        });
        _push(`<!--]--></div>`);
      } else {
        _push(`<!---->`);
      }
      if (_ctx.images.length > 1) {
        _push(`<div class="hotel-carousel__image-nav"><button class="hotel-carousel__nav-btn hotel-carousel__nav-btn--prev"${ssrIncludeBooleanAttr(unref(currentImageIndex) === 0) ? " disabled" : ""}><i class="material-icons">chevron_left</i></button><button class="hotel-carousel__nav-btn hotel-carousel__nav-btn--next"${ssrIncludeBooleanAttr(unref(currentImageIndex) === _ctx.images.length - 1) ? " disabled" : ""}><i class="material-icons">chevron_right</i></button></div>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</div></div>`);
    };
  }
});
const _sfc_setup$7 = _sfc_main$7.setup;
_sfc_main$7.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/HotelCarousel.vue");
  return _sfc_setup$7 ? _sfc_setup$7(props, ctx) : void 0;
};
const HotelCarousel = Object.assign(_sfc_main$7, { __name: "HotelCarousel" });
const _sfc_main$6 = /* @__PURE__ */ defineComponent({
  __name: "HotelCard",
  __ssrInlineRender: true,
  props: {
    hotel: {},
    viewMode: { default: "grid" }
  },
  setup(__props) {
    const props = __props;
    const store = useHotelsStore();
    const { openHotelDrawer, getAmenityLabel, getPlaceName, formatPrice } = store;
    ref(true);
    const loading = ref(false);
    const showSuccess = ref(false);
    const hotelImages = computed(() => {
      if (props.hotel.images && Array.isArray(props.hotel.images) && props.hotel.images.length > 0) {
        return props.hotel.images;
      }
      if (props.hotel.thumb) {
        return [props.hotel.thumb];
      }
      return ["https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800"];
    });
    const openHotelDetails = async () => {
      if (loading.value) return;
      loading.value = true;
      try {
        await new Promise((resolve) => setTimeout(resolve, 300));
        await openHotelDrawer(props.hotel);
        showSuccess.value = true;
        setTimeout(() => {
          showSuccess.value = false;
        }, 2e3);
      } catch (error) {
        console.error("Erro ao abrir detalhes do hotel:", error);
      } finally {
        loading.value = false;
      }
    };
    const handleImageChange = (index) => {
      console.log("Imagem mudou para:", index);
    };
    return (_ctx, _push, _parent, _attrs) => {
      const _component_BaseButton = __nuxt_component_0$2;
      _push(`<div${ssrRenderAttrs(mergeProps({
        class: ["hotel-card", `hotel-card--${_ctx.viewMode}`]
      }, _attrs))}><div class="hotel-card__image-section">`);
      _push(ssrRenderComponent(HotelCarousel, {
        images: unref(hotelImages),
        alt: _ctx.hotel.name,
        stars: _ctx.hotel.stars,
        onImageChange: handleImageChange
      }, null, _parent));
      _push(`</div><div class="hotel-card__details-section"><h3 class="hotel-card__name">${ssrInterpolate(_ctx.hotel.name)}</h3><p class="hotel-card__location">${ssrInterpolate(_ctx.hotel.district)}</p><div class="hotel-card__amenities"><div class="hotel-card__amenity-icon" title="Restaurante"><i class="material-icons">restaurant</i></div><div class="hotel-card__amenity-icon" title="Ar Condicionado"><i class="material-icons">ac_unit</i></div><div class="hotel-card__amenity-icon" title="Wi-Fi"><i class="material-icons">wifi</i></div><div class="hotel-card__amenity-icon" title="Piscina"><i class="material-icons">pool</i></div><div class="hotel-card__amenity-icon" title="Acessibilidade"><i class="material-icons">accessible</i></div><div class="hotel-card__amenity-icon" title="Bar"><i class="material-icons">local_bar</i></div></div><div class="hotel-card__features">`);
      if (_ctx.hotel.hasRefundableRoom) {
        _push(`<span class="hotel-card__feature"><i class="material-icons">attach_money</i> Reembolsável </span>`);
      } else {
        _push(`<!---->`);
      }
      if (_ctx.hotel.hasBreakFast) {
        _push(`<span class="hotel-card__feature"><i class="material-icons">local_cafe</i> Café da manhã </span>`);
      } else {
        _push(`<!---->`);
      }
      _push(`</div></div><div class="hotel-card__pricing-section"><div class="hotel-card__price-label">Por dia</div><div class="hotel-card__main-price">${ssrInterpolate(unref(formatPrice)(Math.floor(_ctx.hotel.totalPrice / 2)))}</div><div class="hotel-card__no-booking-price">No booking ${ssrInterpolate(unref(formatPrice)(Math.floor(_ctx.hotel.totalPrice / 2) + 1500))}</div><div class="hotel-card__price-breakdown"><div class="hotel-card__breakdown-row"><span class="hotel-card__breakdown-label">Diárias</span><span class="hotel-card__breakdown-value">2x ${ssrInterpolate(unref(formatPrice)(Math.floor(_ctx.hotel.totalPrice / 2)))}</span></div><div class="hotel-card__breakdown-row"><span class="hotel-card__breakdown-label">Taxas</span><span class="hotel-card__breakdown-value">2x ${ssrInterpolate(unref(formatPrice)(8e3))}</span></div><div class="hotel-card__breakdown-row hotel-card__breakdown-row--total"><span class="hotel-card__breakdown-label">Total</span><span class="hotel-card__breakdown-value">${ssrInterpolate(unref(formatPrice)(_ctx.hotel.totalPrice))}</span></div></div>`);
      _push(ssrRenderComponent(_component_BaseButton, {
        class: "hotel-card__details-button",
        text: "Ver detalhes",
        loading: unref(loading),
        onClick: openHotelDetails
      }, null, _parent));
      _push(`</div></div>`);
    };
  }
});
const _sfc_setup$6 = _sfc_main$6.setup;
_sfc_main$6.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/HotelCard.vue");
  return _sfc_setup$6 ? _sfc_setup$6(props, ctx) : void 0;
};
const __nuxt_component_2 = Object.assign(_sfc_main$6, { __name: "HotelCard" });
const _sfc_main$5 = /* @__PURE__ */ defineComponent({
  __name: "EmptyState",
  __ssrInlineRender: true,
  props: {
    icon: { default: "search_off" },
    title: {},
    message: {},
    actionText: {}
  },
  emits: ["action"],
  setup(__props) {
    return (_ctx, _push, _parent, _attrs) => {
      const _component_BaseButton = __nuxt_component_0$2;
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "empty-state" }, _attrs))}><div class="empty-state__icon"><i class="material-icons">${ssrInterpolate(_ctx.icon)}</i></div><h3 class="empty-state__title">${ssrInterpolate(_ctx.title)}</h3><p class="empty-state__message">${ssrInterpolate(_ctx.message)}</p>`);
      if (_ctx.actionText) {
        _push(ssrRenderComponent(_component_BaseButton, {
          text: _ctx.actionText,
          onClick: ($event) => _ctx.$emit("action")
        }, null, _parent));
      } else {
        _push(`<!---->`);
      }
      _push(`</div>`);
    };
  }
});
const _sfc_setup$5 = _sfc_main$5.setup;
_sfc_main$5.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/EmptyState.vue");
  return _sfc_setup$5 ? _sfc_setup$5(props, ctx) : void 0;
};
const __nuxt_component_3 = Object.assign(_sfc_main$5, { __name: "EmptyState" });
const config = {
  // Configurações do servidor
  server: {
    port: process.env.PORT || 3001,
    host: process.env.HOST || "localhost"
  },
  // Configurações de paginação
  pagination: {
    availableLimits: [10, 20, 50, 100]
  }
};
const _sfc_main$4 = /* @__PURE__ */ defineComponent({
  __name: "ItemsPerPageSelector",
  __ssrInlineRender: true,
  props: {
    currentLimit: {}
  },
  setup(__props) {
    const store = useHotelsStore();
    const { updateItemsPerPage } = store;
    const availableLimits = computed(() => config.pagination.availableLimits);
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "items-per-page" }, _attrs))} data-v-78e23a54><div class="items-per-page__label" data-v-78e23a54><span data-v-78e23a54>Mostrar</span></div><div class="items-per-page__select" data-v-78e23a54><select${ssrRenderAttr("value", _ctx.currentLimit)} class="items-per-page__dropdown" data-v-78e23a54><!--[-->`);
      ssrRenderList(unref(availableLimits), (limit) => {
        _push(`<option${ssrRenderAttr("value", limit)} data-v-78e23a54>${ssrInterpolate(limit)} hotéis </option>`);
      });
      _push(`<!--]--></select></div><div class="items-per-page__info" data-v-78e23a54><span data-v-78e23a54>por página</span></div></div>`);
    };
  }
});
const _sfc_setup$4 = _sfc_main$4.setup;
_sfc_main$4.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/ItemsPerPageSelector.vue");
  return _sfc_setup$4 ? _sfc_setup$4(props, ctx) : void 0;
};
const __nuxt_component_0 = /* @__PURE__ */ Object.assign(_export_sfc(_sfc_main$4, [["__scopeId", "data-v-78e23a54"]]), { __name: "ItemsPerPageSelector" });
const maxVisiblePages = 5;
const _sfc_main$3 = /* @__PURE__ */ defineComponent({
  __name: "Pagination",
  __ssrInlineRender: true,
  props: {
    pagination: {}
  },
  setup(__props) {
    const props = __props;
    const store = useHotelsStore();
    const { goToPage } = store;
    const startItem = computed(() => {
      return props.pagination.offset + 1;
    });
    const endItem = computed(() => {
      return Math.min(props.pagination.offset + props.pagination.limit, props.pagination.total);
    });
    const showFirstPage = computed(() => {
      return props.pagination.currentPage > 3;
    });
    const showLastPage = computed(() => {
      return props.pagination.currentPage < props.pagination.totalPages - 2;
    });
    const showFirstSeparator = computed(() => {
      return props.pagination.currentPage > 4;
    });
    const showLastSeparator = computed(() => {
      return props.pagination.currentPage < props.pagination.totalPages - 3;
    });
    const visiblePages = computed(() => {
      const pages = [];
      const totalPages = props.pagination.totalPages;
      const currentPage = props.pagination.currentPage;
      if (totalPages <= maxVisiblePages) {
        for (let i = 1; i <= totalPages; i++) {
          pages.push(i);
        }
      } else {
        let start = Math.max(1, currentPage - 2);
        let end = Math.min(totalPages, currentPage + 2);
        if (currentPage <= 3) {
          end = Math.min(totalPages, 5);
        } else if (currentPage >= totalPages - 2) {
          start = Math.max(1, totalPages - 4);
        }
        for (let i = start; i <= end; i++) {
          pages.push(i);
        }
      }
      return pages;
    });
    return (_ctx, _push, _parent, _attrs) => {
      const _component_ItemsPerPageSelector = __nuxt_component_0;
      if (_ctx.pagination.totalPages > 1) {
        _push(`<div${ssrRenderAttrs(mergeProps({ class: "pagination" }, _attrs))} data-v-e89eb586><div class="pagination__header" data-v-e89eb586><div class="pagination__info" data-v-e89eb586><span class="pagination__text" data-v-e89eb586> Mostrando ${ssrInterpolate(unref(startItem))}-${ssrInterpolate(unref(endItem))} de ${ssrInterpolate(_ctx.pagination.total)} hotéis </span></div>`);
        _push(ssrRenderComponent(_component_ItemsPerPageSelector, {
          "current-limit": _ctx.pagination.limit
        }, null, _parent));
        _push(`</div><div class="pagination__controls" data-v-e89eb586><button${ssrIncludeBooleanAttr(_ctx.pagination.currentPage === 1) ? " disabled" : ""} class="pagination__btn pagination__btn--prev" title="Página anterior" data-v-e89eb586><i class="material-icons" data-v-e89eb586>chevron_left</i></button><div class="pagination__pages" data-v-e89eb586>`);
        if (unref(showFirstPage)) {
          _push(`<button class="${ssrRenderClass(["pagination__page", { active: _ctx.pagination.currentPage === 1 }])}" data-v-e89eb586> 1 </button>`);
        } else {
          _push(`<!---->`);
        }
        if (unref(showFirstSeparator)) {
          _push(`<span class="pagination__separator" data-v-e89eb586>...</span>`);
        } else {
          _push(`<!---->`);
        }
        _push(`<!--[-->`);
        ssrRenderList(unref(visiblePages), (page) => {
          _push(`<button class="${ssrRenderClass(["pagination__page", { active: _ctx.pagination.currentPage === page }])}" data-v-e89eb586>${ssrInterpolate(page)}</button>`);
        });
        _push(`<!--]-->`);
        if (unref(showLastSeparator)) {
          _push(`<span class="pagination__separator" data-v-e89eb586>...</span>`);
        } else {
          _push(`<!---->`);
        }
        if (unref(showLastPage)) {
          _push(`<button class="${ssrRenderClass(["pagination__page", { active: _ctx.pagination.currentPage === _ctx.pagination.totalPages }])}" data-v-e89eb586>${ssrInterpolate(_ctx.pagination.totalPages)}</button>`);
        } else {
          _push(`<!---->`);
        }
        _push(`</div><button${ssrIncludeBooleanAttr(_ctx.pagination.currentPage === _ctx.pagination.totalPages) ? " disabled" : ""} class="pagination__btn pagination__btn--next" title="Próxima página" data-v-e89eb586><i class="material-icons" data-v-e89eb586>chevron_right</i></button></div></div>`);
      } else {
        _push(`<!---->`);
      }
    };
  }
});
const _sfc_setup$3 = _sfc_main$3.setup;
_sfc_main$3.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/Pagination.vue");
  return _sfc_setup$3 ? _sfc_setup$3(props, ctx) : void 0;
};
const __nuxt_component_4 = /* @__PURE__ */ Object.assign(_export_sfc(_sfc_main$3, [["__scopeId", "data-v-e89eb586"]]), { __name: "Pagination" });
const _sfc_main$2 = /* @__PURE__ */ defineComponent({
  __name: "LoadMoreButton",
  __ssrInlineRender: true,
  props: {
    pagination: {},
    isLoading: { type: Boolean, default: false }
  },
  setup(__props) {
    const props = __props;
    const store = useHotelsStore();
    const { loadMoreHotels } = store;
    const currentCount = computed(() => {
      return Math.min(props.pagination.offset + props.pagination.limit, props.pagination.total);
    });
    const loadMore = async () => {
      await loadMoreHotels();
    };
    return (_ctx, _push, _parent, _attrs) => {
      const _component_BaseButton = __nuxt_component_0$2;
      if (_ctx.pagination.hasMore) {
        _push(`<div${ssrRenderAttrs(mergeProps({ class: "load-more" }, _attrs))} data-v-6092fddc>`);
        _push(ssrRenderComponent(_component_BaseButton, {
          variant: "outline",
          text: "Carregar mais hotéis",
          icon: "expand_more",
          loading: _ctx.isLoading,
          disabled: _ctx.isLoading,
          onClick: loadMore
        }, null, _parent));
        _push(`<div class="load-more__info" data-v-6092fddc><span class="load-more__text" data-v-6092fddc> Mostrando ${ssrInterpolate(unref(currentCount))} de ${ssrInterpolate(_ctx.pagination.total)} hotéis </span></div></div>`);
      } else {
        _push(`<!---->`);
      }
    };
  }
});
const _sfc_setup$2 = _sfc_main$2.setup;
_sfc_main$2.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/LoadMoreButton.vue");
  return _sfc_setup$2 ? _sfc_setup$2(props, ctx) : void 0;
};
const __nuxt_component_5 = /* @__PURE__ */ Object.assign(_export_sfc(_sfc_main$2, [["__scopeId", "data-v-6092fddc"]]), { __name: "LoadMoreButton" });
const _sfc_main$1 = /* @__PURE__ */ defineComponent({
  __name: "HotelDrawer",
  __ssrInlineRender: true,
  props: {
    modelValue: { type: Boolean },
    hotel: {}
  },
  emits: ["update:modelValue"],
  setup(__props, { emit: __emit }) {
    const props = __props;
    const emit = __emit;
    const store = useHotelsStore();
    const { getAmenityLabel, getPlaceName, closeHotelDrawer } = store;
    const isOpen = computed({
      get: () => props.modelValue,
      set: (value) => emit("update:modelValue", value)
    });
    const images = computed(() => {
      if (!props.hotel) {
        return [];
      }
      if (props.hotel.images && Array.isArray(props.hotel.images) && props.hotel.images.length > 0) {
        return props.hotel.images;
      }
      if (props.hotel.thumb) {
        return [props.hotel.thumb];
      }
      return ["https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800"];
    });
    const handleImageChange = (index) => {
      console.log("Imagem mudou para:", index);
    };
    const getAmenityIcon = (amenity) => {
      const iconMap = {
        "WI_FI": "wifi",
        "PARKING": "local_parking",
        "POOL": "pool",
        "RESTAURANT": "restaurant",
        "FITNESS_CENTER": "fitness_center",
        "ROOM_SERVICE": "room_service",
        "STEAM_ROOM": "hot_tub",
        "PET_FRIENDLY": "pets",
        "BAR": "local_bar",
        "SPA": "spa",
        "ACCESSIBILITY": "accessible",
        "AIR_CONDITIONING": "ac_unit"
      };
      return iconMap[amenity] || "check";
    };
    const getFullAddress = (hotel) => {
      const place = store.places.find((p) => p.id === hotel.placeId);
      if (place) {
        return `${hotel.district}, ${place.name}, ${place.state}`;
      }
      return hotel.district;
    };
    return (_ctx, _push, _parent, _attrs) => {
      _push(`<!--[-->`);
      if (unref(isOpen)) {
        _push(`<div class="hotel-drawer-overlay"></div>`);
      } else {
        _push(`<!---->`);
      }
      _push(`<div class="${ssrRenderClass(["hotel-drawer", { "hotel-drawer--open": unref(isOpen) }])}">`);
      if (_ctx.hotel) {
        _push(`<div class="hotel-drawer__content"><div class="hotel-drawer__header"><h2 class="hotel-drawer__title">${ssrInterpolate(_ctx.hotel.name)}</h2><button class="hotel-drawer__close" aria-label="Fechar detalhes"><i class="material-icons">close</i></button></div><div class="hotel-drawer__image-section">`);
        _push(ssrRenderComponent(HotelCarousel, {
          images: unref(images),
          alt: _ctx.hotel.name,
          stars: _ctx.hotel.stars,
          onImageChange: handleImageChange
        }, null, _parent));
        _push(`</div><div class="hotel-drawer__section"><h3 class="hotel-drawer__section-title">Comodidades</h3><div class="hotel-drawer__amenities-list"><!--[-->`);
        ssrRenderList(_ctx.hotel.amenities, (amenity) => {
          _push(`<div class="hotel-drawer__amenity-item"><i class="${ssrRenderClass([`material-icons ${getAmenityIcon(amenity)}`, "hotel-drawer__amenity-icon"])}"></i><span class="hotel-drawer__amenity-label">${ssrInterpolate(unref(getAmenityLabel)(amenity))}</span></div>`);
        });
        _push(`<!--]--></div></div><div class="hotel-drawer__section"><h3 class="hotel-drawer__section-title">Localização</h3><p class="hotel-drawer__address">${ssrInterpolate(getFullAddress(_ctx.hotel))}</p></div><div class="hotel-drawer__section"><h3 class="hotel-drawer__section-title">Sobre o ${ssrInterpolate(_ctx.hotel.name)}</h3><p class="hotel-drawer__description">${ssrInterpolate(_ctx.hotel.description)}</p></div></div>`);
      } else {
        _push(`<div class="hotel-drawer__loading"><div class="hotel-drawer__spinner"></div><p>Carregando detalhes...</p></div>`);
      }
      _push(`</div><!--]-->`);
    };
  }
});
const _sfc_setup$1 = _sfc_main$1.setup;
_sfc_main$1.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("components/HotelDrawer.vue");
  return _sfc_setup$1 ? _sfc_setup$1(props, ctx) : void 0;
};
const __nuxt_component_6 = Object.assign(_sfc_main$1, { __name: "HotelDrawer" });
const useHotelPage = () => {
  const store = useHotelsStore();
  const sortKey = ref("price-asc");
  const sortOptions = [
    { value: "price-asc", label: "Menor preço" },
    { value: "price-desc", label: "Maior preço" },
    { value: "stars-desc", label: "Melhor classificação" },
    { value: "name-asc", label: "Nome A-Z" }
  ];
  const handleSortChange = () => {
    const sortMap = {
      "price-asc": { key: "totalPrice", label: "Preço", direction: "asc" },
      "price-desc": { key: "totalPrice", label: "Preço", direction: "desc" },
      "stars-desc": { key: "stars", label: "Classificação", direction: "desc" },
      "name-asc": { key: "name", label: "Nome", direction: "asc" }
    };
    store.updateSort(sortMap[sortKey.value]);
  };
  const handleTabChange = (tab) => {
    console.log("Tab changed to:", tab);
  };
  const handleSearch = (query) => {
    store.updateFilters({ searchQuery: query });
  };
  const pageState = computed(() => ({
    loading: store.loading,
    error: store.error,
    hasHotels: store.hotels.length > 0
  }));
  return {
    // Store
    store,
    // Sort
    sortKey,
    sortOptions,
    handleSortChange,
    // Handlers
    handleTabChange,
    handleSearch,
    // Computed
    pageState
  };
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  __name: "index",
  __ssrInlineRender: true,
  setup(__props) {
    const {
      store,
      sortKey,
      sortOptions,
      handleTabChange,
      handleSearch,
      pageState
    } = useHotelPage();
    const viewMode = ref("grid");
    const isMobile = ref(false);
    return (_ctx, _push, _parent, _attrs) => {
      const _component_HotelHeader = __nuxt_component_0$1;
      const _component_LoadingState = __nuxt_component_1;
      const _component_HotelCard = __nuxt_component_2;
      const _component_EmptyState = __nuxt_component_3;
      const _component_Pagination = __nuxt_component_4;
      const _component_LoadMoreButton = __nuxt_component_5;
      const _component_HotelDrawer = __nuxt_component_6;
      _push(`<div${ssrRenderAttrs(mergeProps({ class: "hotels-page" }, _attrs))}><div class="container">`);
      _push(ssrRenderComponent(_component_HotelHeader, {
        onTabChange: unref(handleTabChange),
        onSearch: unref(handleSearch)
      }, null, _parent));
      if (unref(pageState).loading) {
        _push(ssrRenderComponent(_component_LoadingState, { message: "Carregando hotéis..." }, null, _parent));
      } else if (unref(pageState).error) {
        _push(`<div class="error"><p>${ssrInterpolate(unref(pageState).error)}</p><button class="btn btn--primary">Tentar novamente</button></div>`);
      } else {
        _push(`<div class="hotels-page__content"><section class="hotels-section"><div class="sorting-controls"><div class="minimal-controls"><div class="controls-group"><select class="sort-select"><!--[-->`);
        ssrRenderList(unref(sortOptions), (option) => {
          _push(`<option${ssrRenderAttr("value", option.value)}${ssrIncludeBooleanAttr(Array.isArray(unref(sortKey)) ? ssrLooseContain(unref(sortKey), option.value) : ssrLooseEqual(unref(sortKey), option.value)) ? " selected" : ""}>${ssrInterpolate(option.label)}</option>`);
        });
        _push(`<!--]--></select><div class="view-toggle"><button class="${ssrRenderClass(["toggle-btn", { active: viewMode.value === "grid" }])}" title="Grade"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 3H10V10H3V3ZM3 14H10V21H3V14ZM14 3H21V10H14V3ZM14 14H21V21H14V14Z" fill="currentColor"></path></svg></button><button class="${ssrRenderClass(["toggle-btn", { active: viewMode.value === "list" }])}" title="Lista"><svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M3 13H5V11H3V13ZM3 17H5V15H3V17ZM3 9H5V7H3V9ZM7 13H21V11H7V13ZM7 17H21V15H7V17ZM7 7V9H21V7H7Z" fill="currentColor"></path></svg></button></div></div></div></div><div class="hotels-card"><div class="hotels-card__content">`);
        if (unref(pageState).hasHotels) {
          _push(`<div class="${ssrRenderClass(["hotels-container", `hotels-${viewMode.value}`])}"><!--[-->`);
          ssrRenderList(unref(store).hotels, (hotel) => {
            _push(ssrRenderComponent(_component_HotelCard, {
              key: hotel.id,
              hotel,
              "view-mode": viewMode.value
            }, null, _parent));
          });
          _push(`<!--]--></div>`);
        } else {
          _push(ssrRenderComponent(_component_EmptyState, {
            title: "Nenhum hotel encontrado",
            message: "Tente ajustar os filtros para encontrar mais opções",
            "action-text": "Limpar filtros",
            onAction: unref(store).resetFilters
          }, null, _parent));
        }
        if (unref(store).pagination.total > 0 && !isMobile.value) {
          _push(ssrRenderComponent(_component_Pagination, {
            pagination: unref(store).pagination,
            class: "pagination-desktop"
          }, null, _parent));
        } else {
          _push(`<!---->`);
        }
        if (unref(store).pagination.total > 0 && unref(store).pagination.hasMore && isMobile.value && unref(store).pagination.total > unref(store).pagination.limit) {
          _push(ssrRenderComponent(_component_LoadMoreButton, {
            pagination: unref(store).pagination,
            "is-loading": unref(store).isLoadingMore,
            class: "load-more-mobile"
          }, null, _parent));
        } else {
          _push(`<!---->`);
        }
        _push(`</div></div></section></div>`);
      }
      _push(`</div>`);
      _push(ssrRenderComponent(_component_HotelDrawer, {
        modelValue: unref(store).isDrawerOpen,
        "onUpdate:modelValue": ($event) => unref(store).isDrawerOpen = $event,
        hotel: unref(store).selectedHotel
      }, null, _parent));
      _push(`</div>`);
    };
  }
});
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("pages/index.vue");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
export {
  _sfc_main as default
};
//# sourceMappingURL=index-BlZ5uhC8.js.map
