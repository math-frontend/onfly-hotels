{"version":3,"file":"index-BlZ5uhC8.js","sources":["../../../../../../../components/BaseButton.vue","../../../../../../../composables/usePriceMask.ts","../../../../../../../components/PriceInput.vue","../../../../../../../stores/hotels.ts","../../../../../../../components/FilterDropdown.vue","../../../../../../../components/HotelHeader.vue","../../../../../../../components/LoadingState.vue","../../../../../../../components/HotelCarousel.vue","../../../../../../../components/HotelCard.vue","../../../../../../../components/EmptyState.vue","../../../../../../../data/config.js","../../../../../../../components/ItemsPerPageSelector.vue","../../../../../../../components/Pagination.vue","../../../../../../../components/LoadMoreButton.vue","../../../../../../../components/HotelDrawer.vue","../../../../../../../composables/useHotelPage.ts","../../../../../../../pages/index.vue"],"sourcesContent":["<template>\n  <button\n    :class=\"buttonClasses\"\n    :disabled=\"disabled || loading\"\n    @click=\"handleClick\"\n    type=\"button\"\n  >\n    <div v-if=\"loading\" class=\"base-button__loading\">\n      <div class=\"spinner\"></div>\n    </div>\n    <i v-else class=\"material-icons\">{{ icon }}</i>\n    <span v-if=\"showText\">{{ text }}</span>\n  </button>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  text?: string\n  icon?: string\n  variant?: 'primary' | 'secondary' | 'outline'\n  size?: 'small' | 'medium' | 'large'\n  loading?: boolean\n  disabled?: boolean\n  showText?: boolean\n  fullWidth?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  text: 'Botão',\n  icon: '',\n  variant: 'primary',\n  size: 'medium',\n  loading: false,\n  disabled: false,\n  showText: true,\n  fullWidth: false\n})\n\nconst emit = defineEmits<{\n  click: [event: MouseEvent]\n}>()\n\nconst buttonClasses = computed(() => [\n  'base-button',\n  `base-button--${props.variant}`,\n  `base-button--${props.size}`,\n  {\n    'base-button--loading': props.loading,\n    'base-button--disabled': props.disabled,\n    'base-button--full-width': props.fullWidth\n  }\n])\n\nconst handleClick = (event: MouseEvent) => {\n  if (!props.disabled && !props.loading) {\n    emit('click', event)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.base-button {\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  gap: 8px;\n  border: none;\n  border-radius: 12px;\n  cursor: pointer;\n  font-family: inherit;\n  font-weight: 600;\n  text-decoration: none;\n  transition: all 0.2s ease;\n  position: relative;\n  overflow: hidden;\n\n  // Variants\n  &--primary {\n    background: #0094ff;\n    color: #fff;\n    min-width: 120px;\n\n    &:hover:not(:disabled) {\n      background: darken(#0094ff, 5%);\n      transform: translateY(-1px);\n      box-shadow: 0 4px 12px rgba(0, 148, 255, 0.3);\n    }\n\n    &:active:not(:disabled) {\n      transform: translateY(0);\n    }\n  }\n\n  &--secondary {\n    background: #f1f5f9;\n    color: #64748b;\n    border: 1px solid #e2e8f0;\n\n    &:hover:not(:disabled) {\n      background: #e2e8f0;\n      color: #475569;\n    }\n  }\n\n  &--outline {\n    background: transparent;\n    color: #0094ff;\n    border: 2px solid #0094ff;\n\n    &:hover:not(:disabled) {\n      background: #0094ff;\n      color: #fff;\n    }\n  }\n\n  // Sizes\n  &--small {\n    padding: 8px 16px;\n    font-size: 14px;\n    min-width: 80px;\n\n    .material-icons {\n      font-size: 16px;\n    }\n  }\n\n  &--medium {\n    padding: 0 24px;\n    font-size: 16px;\n    min-width: 120px;\n\n    .material-icons {\n      font-size: 18px;\n    }\n  }\n\n  &--large {\n    padding: 16px 32px;\n    font-size: 18px;\n    min-width: 160px;\n\n    .material-icons {\n      font-size: 20px;\n    }\n  }\n\n  // States\n  &--loading {\n    cursor: wait;\n  }\n\n  &--disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n    transform: none !important;\n  }\n\n  &--full-width {\n    width: 100%;\n  }\n\n  // Loading spinner\n  &__loading {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    .spinner {\n      width: 16px;\n      height: 16px;\n      border: 2px solid rgba(255, 255, 255, 0.3);\n      border-top: 2px solid #fff;\n      border-radius: 50%;\n      animation: spin 1s linear infinite;\n    }\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style>\n","export const usePriceMask = () => {\n  // Função para formatar preço para exibição (com R$)\n  const formatPrice = (value: number): string => {\n    if (value === 0) return 'Grátis'\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(value / 100)\n  }\n\n  // Função para formatar preço para input (sem R$)\n  const formatPriceInput = (value: number): string => {\n    if (value === 0) return ''\n    return new Intl.NumberFormat('pt-BR', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(value / 100)\n  }\n\n  // Função para extrair valor numérico da string formatada\n  const extractPriceValue = (formattedValue: string): number => {\n    // Remove tudo exceto números e vírgula\n    const cleanValue = formattedValue.replace(/[^\\d,]/g, '')\n    // Substitui vírgula por ponto para conversão\n    const numericValue = cleanValue.replace(',', '.')\n    // Converte para centavos\n    const parsedValue = parseFloat(numericValue || '0')\n    return Math.round(parsedValue * 100)\n  }\n\n  // Função para aplicar máscara em tempo real\n  const applyPriceMask = (value: string): string => {\n    // Remove tudo exceto números\n    const numbers = value.replace(/\\D/g, '')\n\n    if (numbers.length === 0) return ''\n\n    // Converte para centavos\n    const cents = parseInt(numbers)\n    \n    // Formata como moeda brasileira\n    const formatted = new Intl.NumberFormat('pt-BR', {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    }).format(cents / 100)\n    \n    return formatted\n  }\n\n  // Handler para input com máscara\n  const handlePriceInput = (\n    event: Event,\n    updateValue: (value: number) => void,\n    defaultValue: number = 0\n  ) => {\n    const target = event.target as HTMLInputElement\n    const value = target.value\n\n    // Se o campo estiver vazio, usar valor padrão\n    if (!value.trim()) {\n      updateValue(defaultValue)\n      target.value = ''\n      return\n    }\n\n    // Aplicar máscara em tempo real\n    const maskedValue = applyPriceMask(value)\n    target.value = maskedValue\n\n    // Extrair valor numérico\n    const numericValue = extractPriceValue(maskedValue)\n    updateValue(numericValue)\n  }\n\n  return {\n    formatPrice,\n    formatPriceInput,\n    extractPriceValue,\n    applyPriceMask,\n    handlePriceInput\n  }\n}\n","<template>\n  <div class=\"price-input\">\n    <label v-if=\"label\" class=\"price-input__label\">{{ label }}</label>\n    <input\n      type=\"text\"\n      :value=\"formattedValue\"\n      @input=\"handleInput\"\n      :placeholder=\"placeholder\"\n      :class=\"['price-input__field', inputClass]\"\n      :disabled=\"disabled\"\n    >\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  modelValue: number\n  label?: string\n  placeholder?: string\n  inputClass?: string\n  disabled?: boolean\n  min?: number\n  max?: number\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  label: '',\n  placeholder: 'R$ 0,00',\n  inputClass: '',\n  disabled: false,\n  min: 0,\n  max: 1000000\n})\n\nconst emit = defineEmits<{\n  'update:modelValue': [value: number]\n}>()\n\nconst { formatPriceInput, handlePriceInput } = usePriceMask()\n\n// Valor formatado para exibição\nconst formattedValue = computed(() => {\n  return formatPriceInput(props.modelValue)\n})\n\n// Handler para input\nconst handleInput = (event: Event) => {\n  handlePriceInput(event, (value) => {\n    // Validar limites\n    const clampedValue = Math.max(props.min, Math.min(props.max, value))\n    emit('update:modelValue', clampedValue)\n  }, props.min)\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.price-input {\n  display: flex;\n  flex-direction: column;\n  gap: $spacing-4;\n\n  &__label {\n    font-size: $font-size-default;\n    font-weight: 500;\n    color: $info-600;\n    font-family: $font-family;\n  }\n\n  &__field {\n    width: 100%;\n    padding: $spacing-8 $spacing-12;\n    border: 1px solid $info-200;\n    border-radius: $border-radius-8;\n    font-family: $font-family;\n    font-size: $font-size-default;\n    color: $info-600;\n    background-color: white;\n    transition: border-color 0.2s ease;\n\n    &:focus {\n      outline: none;\n      border-color: $primary-100;\n      box-shadow: 0 0 0 3px rgba(0, 158, 251, 0.1);\n    }\n\n    &:disabled {\n      background-color: $info-100;\n      color: $info-400;\n      cursor: not-allowed;\n    }\n\n    &::placeholder {\n      color: $info-300;\n    }\n  }\n}\n</style>\n","import { defineStore } from 'pinia'\nimport type { Hotel, Place, Amenity, FilterState, SortOption, ApiResponse, City, PaginationInfo } from '~/types'\n\n// Configurações da API\nconst API_BASE_URL = 'http://localhost:3001/api'\n\n// Tipos para respostas da API\ninterface FilteredResponse {\n  hotels: Hotel[]\n  stats: {\n    total: number\n    priceRange: { min: number; max: number }\n    avgPrice: number\n  }\n}\n\ninterface StatsResponse {\n  total: number\n  priceRange: { min: number; max: number }\n  avgPrice: number\n  starsDistribution: Record<string, number>\n  amenitiesCount: Record<string, number>\n}\n\nexport const useHotelsStore = defineStore('hotels', () => {\n  // ===== STATE =====\n  const hotels = ref<Hotel[]>([])\n  const places = ref<Place[]>([])\n  const amenities = ref<Amenity[]>([])\n  const loading = ref(false)\n  const error = ref<string | null>(null)\n\n  // Estado da paginação\n  const pagination = ref<PaginationInfo>({\n    total: 0,\n    offset: 0,\n    limit: 10,\n    hasMore: false,\n    currentPage: 1,\n    totalPages: 0\n  })\n\n  // Estado para load infinito\n  const isLoadingMore = ref(false)\n  const hasInitialLoad = ref(false)\n\n  // Estado dos filtros\n  const filters = ref<FilterState>({\n    minPrice: 0,\n    maxPrice: 1000000,\n    stars: [],\n    amenities: [],\n    hasBreakFast: null,\n    hasRefundableRoom: null,\n    placeId: null,\n    searchQuery: ''\n  })\n\n  // Estado da ordenação\n  const sortBy = ref<SortOption>({\n    key: 'totalPrice',\n    label: 'Preço',\n    direction: 'asc'\n  })\n\n  // Estado das estatísticas\n  const stats = ref<StatsResponse>({\n    total: 0,\n    priceRange: { min: 0, max: 0 },\n    avgPrice: 0,\n    starsDistribution: {},\n    amenitiesCount: {}\n  })\n\n  // Estado do drawer de detalhes do hotel\n  const selectedHotel = ref<Hotel | null>(null)\n  const isDrawerOpen = ref(false)\n\n  // ===== CITY SEARCH STATE =====\n  const citySearchQuery = ref('')\n  const citySearchResults = ref<City[]>([])\n  const citySearchLoading = ref(false)\n  const citySearchError = ref<string | null>(null)\n  const citySearchCache = ref<Map<string, City[]>>(new Map())\n  const citySearchDebounceTimer = ref<NodeJS.Timeout | null>(null)\n\n  // ===== COMPUTED PROPERTIES =====\n  const filteredHotels = computed(() => {\n    let result = [...hotels.value]\n\n    // Filter by search query\n    if (filters.value.searchQuery.trim()) {\n      const query = filters.value.searchQuery.toLowerCase()\n      result = result.filter(hotel =>\n        hotel.name.toLowerCase().includes(query) ||\n        hotel.district.toLowerCase().includes(query) ||\n        getPlaceName(hotel.placeId).toLowerCase().includes(query)\n      )\n    }\n\n    // Filter by price range\n    result = result.filter(hotel =>\n      hotel.totalPrice >= filters.value.minPrice &&\n      hotel.totalPrice <= filters.value.maxPrice\n    )\n\n    // Filter by stars\n    if (filters.value.stars.length > 0) {\n      result = result.filter(hotel =>\n        filters.value.stars.includes(hotel.stars)\n      )\n    }\n\n    // Filter by amenities\n    if (filters.value.amenities.length > 0) {\n      result = result.filter(hotel =>\n        filters.value.amenities.every(amenity =>\n          hotel.amenities.includes(amenity)\n        )\n      )\n    }\n\n    // Filter by breakfast\n    if (filters.value.hasBreakFast !== null) {\n      result = result.filter(hotel =>\n        hotel.hasBreakFast === filters.value.hasBreakFast\n      )\n    }\n\n    // Filter by refundable room\n    if (filters.value.hasRefundableRoom !== null) {\n      result = result.filter(hotel =>\n        hotel.hasRefundableRoom === filters.value.hasRefundableRoom\n      )\n    }\n\n    // Filter by place\n    if (filters.value.placeId !== null) {\n      result = result.filter(hotel =>\n        hotel.placeId === filters.value.placeId\n      )\n    }\n\n    // Sort results\n    result.sort((a, b) => {\n      const { key, direction } = sortBy.value\n\n      if (key === 'totalPrice') {\n        return direction === 'asc' ? a.totalPrice - b.totalPrice : b.totalPrice - a.totalPrice\n      } else if (key === 'stars') {\n        return direction === 'asc' ? parseInt(a.stars) - parseInt(b.stars) : parseInt(b.stars) - parseInt(a.stars)\n      } else if (key === 'name') {\n        return direction === 'asc' ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)\n      }\n\n      return 0\n    })\n\n    return result\n  })\n\n  const filteredStats = computed(() => {\n    const total = hotels.value.length\n    const avgPrice = total > 0\n      ? Math.round(hotels.value.reduce((sum, h) => sum + h.totalPrice, 0) / total)\n      : 0\n    const priceRange = total > 0\n      ? {\n          min: Math.min(...hotels.value.map(h => h.totalPrice)),\n          max: Math.max(...hotels.value.map(h => h.totalPrice))\n        }\n      : { min: 0, max: 0 }\n\n    return { total, avgPrice, priceRange }\n  })\n\n  // Computed para verificar se há filtros ativos\n  const hasActiveFilters = computed(() => {\n    return (\n      filters.value.minPrice > 0 ||\n      filters.value.maxPrice < 1000000 ||\n      filters.value.stars.length > 0 ||\n      filters.value.amenities.length > 0 ||\n      filters.value.hasBreakFast !== null ||\n      filters.value.hasRefundableRoom !== null ||\n      filters.value.placeId !== null ||\n      filters.value.searchQuery.trim() !== ''\n    )\n  })\n\n  // Computed para contar filtros ativos\n  const activeFiltersCount = computed(() => {\n    let count = 0\n    if (filters.value.minPrice > 0 || filters.value.maxPrice < 1000000) count++\n    if (filters.value.stars.length > 0) count++\n    if (filters.value.amenities.length > 0) count++\n    if (filters.value.hasBreakFast !== null) count++\n    if (filters.value.hasRefundableRoom !== null) count++\n    if (filters.value.placeId !== null) count++\n    if (filters.value.searchQuery.trim() !== '') count++\n    return count\n  })\n\n  // Computed para hotéis agrupados por estrelas\n  const hotelsByStars = computed(() => {\n    const grouped = hotels.value.reduce((acc, hotel) => {\n      const stars = hotel.stars\n      if (!acc[stars]) acc[stars] = []\n      acc[stars].push(hotel)\n      return acc\n    }, {} as Record<string, Hotel[]>)\n\n    return grouped\n  })\n\n  // Computed para hotéis agrupados por lugar\n  const hotelsByPlace = computed(() => {\n    const grouped = hotels.value.reduce((acc, hotel) => {\n      const placeName = getPlaceName(hotel.placeId)\n      if (!acc[placeName]) acc[placeName] = []\n      acc[placeName].push(hotel)\n      return acc\n    }, {} as Record<string, Hotel[]>)\n\n    return grouped\n  })\n\n  // Computed para estatísticas de preço\n  const priceStats = computed(() => {\n    if (hotels.value.length === 0) {\n      return { min: 0, max: 0, avg: 0, median: 0 }\n    }\n\n    const prices = hotels.value.map(h => h.totalPrice).sort((a, b) => a - b)\n    const min = prices[0]\n    const max = prices[prices.length - 1]\n    const avg = Math.round(prices.reduce((sum, price) => sum + price, 0) / prices.length)\n    const median = prices[Math.floor(prices.length / 2)]\n\n    return { min, max, avg, median }\n  })\n\n  // ===== CITY SEARCH COMPUTED =====\n  const formattedCityResults = computed(() => {\n    return citySearchResults.value.map(city => ({\n      ...city,\n      displayName: `${city.name}, ${city.state.shortname}`,\n      fullName: `${city.name}, ${city.state.name}`\n    }))\n  })\n\n  const hasCitySearchResults = computed(() => citySearchResults.value.length > 0)\n  const shouldShowCitySearch = computed(() => citySearchQuery.value.length >= 3)\n\n  // ===== UTILITY FUNCTIONS =====\n  // Helper function to extract data from API response\n  const extractData = <T>(response: T | { success: boolean; data: T }): T => {\n    if (response && typeof response === 'object' && 'success' in response && 'data' in response) {\n      return (response as { success: boolean; data: T }).data\n    }\n    return response as T\n  }\n\n  const formatPrice = (price: number): string => {\n    return new Intl.NumberFormat('pt-BR', {\n      style: 'currency',\n      currency: 'BRL'\n    }).format(price / 100)\n  }\n\n  const getAmenityLabel = (key: string): string => {\n    const amenityMap: Record<string, string> = {\n      'WI_FI': 'Wi-fi grátis',\n      'PARKING': 'Estacionamento',\n      'POOL': 'Piscina',\n      'RESTAURANT': 'Restaurante',\n      'FITNESS_CENTER': 'Academia',\n      'ROOM_SERVICE': 'Serviço de quarto',\n      'STEAM_ROOM': 'Sauna',\n      'PET_FRIENDLY': 'Aceita pets',\n      'BAR': 'Bar',\n      'SPA': 'Spa',\n      'ACCESSIBILITY': 'Acessibilidade',\n      'AIR_CONDITIONING': 'Ar-condicionado'\n    }\n    return amenityMap[key] || key\n  }\n\n  const getPlaceName = (placeId: number): string => {\n    const place = places.value.find(p => p.id === placeId)\n    return place ? `${place.name}, ${place.state}` : 'Local não encontrado'\n  }\n\n  const buildQueryParams = (filters: FilterState, sortBy: SortOption, offset?: number, limit?: number): URLSearchParams => {\n    const params = new URLSearchParams()\n\n    // Parâmetros de busca\n    if (filters.searchQuery) params.append('q', filters.searchQuery)\n    if (filters.minPrice > 0) params.append('minPrice', filters.minPrice.toString())\n    if (filters.maxPrice < 1000000) params.append('maxPrice', filters.maxPrice.toString())\n    if (filters.stars.length > 0) params.append('stars', filters.stars.join(','))\n    if (filters.amenities.length > 0) params.append('amenities', filters.amenities.join(','))\n    if (filters.hasBreakFast !== null) params.append('hasBreakFast', filters.hasBreakFast.toString())\n    if (filters.hasRefundableRoom !== null) params.append('hasRefundableRoom', filters.hasRefundableRoom.toString())\n    if (filters.placeId) params.append('placeId', filters.placeId.toString())\n\n    // Parâmetros de ordenação\n    if (sortBy.key) params.append('sortBy', sortBy.key)\n    if (sortBy.direction) params.append('sortOrder', sortBy.direction)\n\n    // Parâmetros de paginação\n    if (offset !== undefined) params.append('offset', offset.toString())\n    if (limit !== undefined) params.append('limit', limit.toString())\n\n    return params\n  }\n\n  // ===== API FUNCTIONS =====\n  const apiRequest = async <T>(endpoint: string, options?: RequestInit): Promise<T> => {\n    try {\n      const url = `${API_BASE_URL}${endpoint}`\n\n      const response = await fetch(url, {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        ...options\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`)\n      }\n\n      const data = await response.json()\n      return data\n    } catch (err) {\n      console.error('API request failed:', err)\n      throw err\n    }\n  }\n\n  // ===== PAGINATION ACTIONS =====\n\n  const loadMoreHotels = async (): Promise<void> => {\n    if (isLoadingMore.value || !pagination.value.hasMore) return\n\n    isLoadingMore.value = true\n    pagination.value.offset += pagination.value.limit\n\n    try {\n      await fetchFilteredHotels(false)\n    } catch (err) {\n      // Reverter offset em caso de erro\n      pagination.value.offset -= pagination.value.limit\n      console.error('Error loading more hotels:', err)\n    } finally {\n      isLoadingMore.value = false\n    }\n  }\n\n  const goToPage = async (page: number): Promise<void> => {\n    if (page < 1 || page > pagination.value.totalPages) return\n\n    const offset = (page - 1) * pagination.value.limit\n    pagination.value.offset = offset\n    pagination.value.currentPage = page\n\n    await fetchFilteredHotels(false)\n  }\n\n  const resetPagination = (): void => {\n    pagination.value = {\n      total: 0,\n      offset: 0,\n      limit: 10,\n      hasMore: false,\n      currentPage: 1,\n      totalPages: 0\n    }\n    hotels.value = []\n    hasInitialLoad.value = false\n  }\n\n  const updateItemsPerPage = async (newLimit: number): Promise<void> => {\n    pagination.value.limit = newLimit\n    pagination.value.offset = 0\n    pagination.value.currentPage = 1\n    hotels.value = []\n    await fetchFilteredHotels(false)\n  }\n\n  // ===== ACTIONS =====\n\n  // Busca unificada que pode lidar com diferentes tipos de busca\n  const unifiedSearch = async (query: string, type?: 'hotel' | 'place' | 'city'): Promise<void> => {\n    try {\n      if (type === 'place') {\n        // Buscar por lugar específico\n        const place = places.value.find(p =>\n          p.name.toLowerCase().includes(query.toLowerCase()) ||\n          p.state.toLowerCase().includes(query.toLowerCase())\n        )\n\n        if (place) {\n          updateFilters({ placeId: place.id, searchQuery: '' })\n        }\n      } else if (type === 'city') {\n        // Buscar por cidade\n        const place = places.value.find(p =>\n          p.name.toLowerCase().includes(query.toLowerCase())\n        )\n\n        if (place) {\n          updateFilters({ placeId: place.id, searchQuery: '' })\n        } else {\n          // Se não encontrar a cidade, fazer busca geral\n          await searchHotels(query)\n        }\n      } else {\n        // Busca geral por hotéis\n        await searchHotels(query)\n      }\n    } catch (err) {\n      console.error('Erro na busca unificada:', err)\n    }\n  }\n\n  const fetchInitialData = async (): Promise<void> => {\n    loading.value = true\n    error.value = null\n\n    try {\n      // Buscar dados em paralelo\n      const [placesResponse, amenitiesResponse, statsResponse] = await Promise.all([\n        apiRequest<Place[] | { success: boolean; data: Place[] }>('/places'),\n        apiRequest<Amenity[] | { success: boolean; data: Amenity[] }>('/amenities'),\n        apiRequest<StatsResponse | { success: boolean; data: StatsResponse }>('/hotels/stats')\n      ])\n\n      places.value = extractData(placesResponse)\n      amenities.value = extractData(amenitiesResponse)\n      stats.value = extractData(statsResponse)\n\n      // Carregar hotéis com paginação\n      await fetchFilteredHotels()\n\n    } catch (err) {\n      error.value = 'Erro ao carregar dados iniciais'\n      console.error('Error fetching initial data:', err)\n    } finally {\n      loading.value = false\n    }\n  }\n\n    const fetchFilteredHotels = async (resetPagination: boolean = true): Promise<void> => {\n    if (resetPagination) {\n      pagination.value.offset = 0\n      pagination.value.currentPage = 1\n      hotels.value = []\n    }\n\n    loading.value = true\n    error.value = null\n\n    try {\n      const params = buildQueryParams(\n        filters.value,\n        sortBy.value,\n        pagination.value.offset,\n        pagination.value.limit\n      )\n      const response = await apiRequest<FilteredResponse | { success: boolean; data: FilteredResponse }>(`/hotels/filtered?${params}`)\n\n      const data = extractData(response)\n\n      if (resetPagination) {\n        hotels.value = data.hotels\n      } else {\n        hotels.value = [...hotels.value, ...data.hotels]\n      }\n\n      // Atualizar informações de paginação\n      const responseData = data as any\n      if (responseData.pagination) {\n        pagination.value = {\n          ...responseData.pagination,\n          currentPage: Math.floor(responseData.pagination.offset / responseData.pagination.limit) + 1,\n          totalPages: Math.ceil(responseData.pagination.total / responseData.pagination.limit)\n        }\n\n\n      }\n\n      hasInitialLoad.value = true\n    } catch (err) {\n      error.value = 'Erro ao carregar hotéis'\n      console.error('Error fetching filtered hotels:', err)\n    } finally {\n      loading.value = false\n    }\n  }\n\n  const fetchHotels = async (): Promise<void> => {\n    await fetchFilteredHotels()\n  }\n\n  const fetchStats = async (): Promise<void> => {\n    try {\n      const response = await apiRequest<StatsResponse | { success: boolean; data: StatsResponse }>('/hotels/stats')\n\n      stats.value = extractData(response)\n    } catch (err) {\n      console.error('Error fetching stats:', err)\n    }\n  }\n\n  // ===== FILTER ACTIONS =====\n\n  // Atualizar filtros gerais\n  const updateFilters = (newFilters: Partial<FilterState>): void => {\n    filters.value = { ...filters.value, ...newFilters }\n    // Resetar paginação quando filtros mudam\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  // Filtros específicos por tipo\n  const updatePriceFilter = (minPrice: number, maxPrice: number): void => {\n    filters.value.minPrice = minPrice\n    filters.value.maxPrice = maxPrice\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  const updateStarsFilter = (stars: string[]): void => {\n    filters.value.stars = stars\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  const updateAmenitiesFilter = (amenities: string[]): void => {\n    filters.value.amenities = amenities\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  const updateBreakfastFilter = (hasBreakFast: boolean | null): void => {\n    filters.value.hasBreakFast = hasBreakFast\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  const updateRefundableFilter = (hasRefundableRoom: boolean | null): void => {\n    filters.value.hasRefundableRoom = hasRefundableRoom\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  const updatePlaceFilter = (placeId: number | null): void => {\n    filters.value.placeId = placeId\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  const updateSearchQuery = (searchQuery: string): void => {\n    filters.value.searchQuery = searchQuery\n    resetPagination()\n    debouncedFetchHotels()\n  }\n\n  // Adicionar/remover filtros individuais\n  const addStarFilter = (star: string): void => {\n    if (!filters.value.stars.includes(star)) {\n      filters.value.stars.push(star)\n      debouncedFetchHotels()\n    }\n  }\n\n  const removeStarFilter = (star: string): void => {\n    filters.value.stars = filters.value.stars.filter(s => s !== star)\n    debouncedFetchHotels()\n  }\n\n  const addAmenityFilter = (amenity: string): void => {\n    if (!filters.value.amenities.includes(amenity)) {\n      filters.value.amenities.push(amenity)\n      debouncedFetchHotels()\n    }\n  }\n\n  const removeAmenityFilter = (amenity: string): void => {\n    filters.value.amenities = filters.value.amenities.filter(a => a !== amenity)\n    debouncedFetchHotels()\n  }\n\n  // Ordenação\n  const updateSort = (newSort: SortOption): void => {\n    sortBy.value = newSort\n    // Resetar paginação quando ordenação muda\n    resetPagination()\n    fetchFilteredHotels()\n  }\n\n  const sortByPrice = (direction: 'asc' | 'desc' = 'asc'): void => {\n    sortBy.value = { key: 'totalPrice', label: 'Preço', direction }\n    fetchFilteredHotels()\n  }\n\n  const sortByStars = (direction: 'asc' | 'desc' = 'desc'): void => {\n    sortBy.value = { key: 'stars', label: 'Classificação', direction }\n    fetchFilteredHotels()\n  }\n\n  const sortByName = (direction: 'asc' | 'desc' = 'asc'): void => {\n    sortBy.value = { key: 'name', label: 'Nome', direction }\n    fetchFilteredHotels()\n  }\n\n  // Resetar filtros\n  const resetFilters = (): void => {\n    filters.value = {\n      minPrice: 0,\n      maxPrice: 1000000,\n      stars: [],\n      amenities: [],\n      hasBreakFast: null,\n      hasRefundableRoom: null,\n      placeId: null,\n      searchQuery: ''\n    }\n    resetPagination()\n    fetchFilteredHotels()\n  }\n\n  const resetPriceFilter = (): void => {\n    filters.value.minPrice = 0\n    filters.value.maxPrice = 1000000\n    debouncedFetchHotels()\n  }\n\n  const resetStarsFilter = (): void => {\n    filters.value.stars = []\n    debouncedFetchHotels()\n  }\n\n  const resetAmenitiesFilter = (): void => {\n    filters.value.amenities = []\n    debouncedFetchHotels()\n  }\n\n  const resetSearchQuery = (): void => {\n    filters.value.searchQuery = ''\n    debouncedFetchHotels()\n  }\n\n  // ===== DEBOUNCE FUNCTION =====\n  let debounceTimer: NodeJS.Timeout | null = null\n  const debouncedFetchHotels = (): void => {\n    if (debounceTimer) clearTimeout(debounceTimer)\n    debounceTimer = setTimeout(() => {\n      fetchFilteredHotels(true) // Sempre resetar paginação em busca\n    }, 300)\n  }\n\n  // ===== CITY SEARCH ACTIONS =====\n  const searchCities = async (query: string): Promise<void> => {\n    if (query.length < 3) {\n      citySearchResults.value = []\n      return\n    }\n\n    if (citySearchCache.value.has(query)) {\n      citySearchResults.value = citySearchCache.value.get(query) || []\n      return\n    }\n\n    citySearchLoading.value = true\n    citySearchError.value = null\n\n    try {\n      const response = await apiRequest<City[] | { success: boolean; data: City[] }>(`/cities?name_like=${encodeURIComponent(query)}`)\n      const data = extractData(response)\n      citySearchResults.value = data\n      citySearchCache.value.set(query, data)\n    } catch (err) {\n      citySearchError.value = 'Erro ao buscar cidades'\n      console.error('Error searching cities:', err)\n    } finally {\n      citySearchLoading.value = false\n    }\n  }\n\n  const selectCity = (city: City): void => {\n    updateFilters({ placeId: city.placeId, searchQuery: '' })\n    citySearchQuery.value = ''\n    citySearchResults.value = []\n  }\n\n  const updateCitySearchQuery = (query: string): void => {\n    citySearchQuery.value = query\n\n    // Clear previous timer\n    if (citySearchDebounceTimer.value) {\n      clearTimeout(citySearchDebounceTimer.value)\n    }\n\n    // Set new timer for debounced search\n    citySearchDebounceTimer.value = setTimeout(() => {\n      searchCities(query)\n    }, 300)\n  }\n\n  const clearCitySearch = (): void => {\n    citySearchQuery.value = ''\n    citySearchResults.value = []\n    citySearchError.value = null\n    if (citySearchDebounceTimer.value) {\n      clearTimeout(citySearchDebounceTimer.value)\n    }\n  }\n\n  // ===== SEARCH ACTIONS =====\n  const searchHotels = async (query: string): Promise<void> => {\n    // Atualizar o filtro de busca\n    updateFilters({ searchQuery: query })\n\n    // Fazer a requisição para a API com a busca\n    try {\n      const params = new URLSearchParams()\n      if (query.trim()) {\n        params.append('q', query.trim())\n      }\n\n      const response = await apiRequest<{ success: boolean; data: Hotel[] }>(`/hotels/search?${params}`)\n\n      // A API retorna { success: true, data: [...] }\n      if (response.success && response.data) {\n        hotels.value = response.data\n      } else {\n        hotels.value = []\n      }\n    } catch (err) {\n      console.error('Erro na busca:', err)\n      // Em caso de erro, fazer busca local\n      performLocalSearch(query)\n    }\n  }\n\n  // Busca local quando a API falha\n  const performLocalSearch = (query: string): void => {\n    const searchTerm = query.toLowerCase()\n\n    // Buscar por nome do hotel, distrito ou lugar\n    const filteredHotels = hotels.value.filter(hotel => {\n      const hotelName = hotel.name.toLowerCase()\n      const district = hotel.district.toLowerCase()\n      const place = getPlaceName(hotel.placeId).toLowerCase()\n\n      return hotelName.includes(searchTerm) ||\n             district.includes(searchTerm) ||\n             place.includes(searchTerm)\n    })\n\n    hotels.value = filteredHotels\n  }\n\n  // ===== DRAWER ACTIONS =====\n  const openHotelDrawer = async (hotel: Hotel): Promise<void> => {\n    console.log('Store - openHotelDrawer chamado com hotel:', hotel)\n    console.log('Store - hotel.id:', hotel.id)\n\n    try {\n      // Buscar detalhes completos do hotel via API\n      console.log('Store - buscando detalhes do hotel...')\n      const hotelDetails = await fetchHotelById(hotel.id)\n      console.log('Store - hotelDetails recebido:', hotelDetails)\n      console.log('Store - hotelDetails.images:', hotelDetails.images)\n\n      selectedHotel.value = hotelDetails\n      isDrawerOpen.value = true\n      console.log('Store - drawer aberto com sucesso')\n      console.log('Store - selectedHotel.value:', selectedHotel.value)\n      console.log('Store - selectedHotel.value.thumb:', selectedHotel.value?.thumb)\n      console.log('Store - isDrawerOpen.value:', isDrawerOpen.value)\n    } catch (error) {\n      console.error('Erro ao abrir drawer:', error)\n      // Fallback: usar o hotel básico se a API falhar\n      console.log('Store - usando fallback com hotel básico')\n      selectedHotel.value = hotel\n      isDrawerOpen.value = true\n    }\n  }\n\n  const closeHotelDrawer = (): void => {\n    selectedHotel.value = null\n    isDrawerOpen.value = false\n  }\n\n  // ===== HOTEL DETAILS ACTIONS =====\n  const fetchHotelById = async (id: number): Promise<Hotel> => {\n    console.log('Store - fetchHotelById chamado com id:', id)\n\n    try {\n      const response = await apiRequest<Hotel | { success: boolean; data: Hotel }>(`/hotels/${id}`)\n      console.log('Store - response da API:', response)\n\n      const hotel = extractData(response)\n      console.log('Store - hotel após extractData:', hotel)\n\n      // Garantir que o hotel tenha o campo images\n      if (!hotel.images) {\n        console.log('Store - hotel não tem images, usando fallback')\n        hotel.images = [hotel.thumb]\n      }\n\n      console.log('Store - hotel final:', hotel)\n      return hotel\n    } catch (error) {\n      console.error('Erro ao buscar hotel por ID:', error)\n      throw error\n    }\n  }\n\n  const getHotelDetails = async (id: number): Promise<Hotel | null> => {\n    try {\n      return await fetchHotelById(id)\n    } catch (error) {\n      console.error('Erro ao obter detalhes do hotel:', error)\n      return null\n    }\n  }\n\n  // ===== UTILITY ACTIONS =====\n  const getHotelById = (id: number): Hotel | undefined => {\n    return hotels.value.find(hotel => hotel.id === id)\n  }\n\n  const getHotelsByPlace = (placeId: number): Hotel[] => {\n    return hotels.value.filter(hotel => hotel.placeId === placeId)\n  }\n\n  const getHotelsByStars = (stars: string): Hotel[] => {\n    return hotels.value.filter(hotel => hotel.stars === stars)\n  }\n\n  const getHotelsByPriceRange = (min: number, max: number): Hotel[] => {\n    return hotels.value.filter(hotel =>\n      hotel.totalPrice >= min && hotel.totalPrice <= max\n    )\n  }\n\n  const getHotelsWithAmenity = (amenity: string): Hotel[] => {\n    return hotels.value.filter(hotel => hotel.amenities.includes(amenity))\n  }\n\n  // ===== EXPORT =====\n\n  return {\n    // State\n    hotels,\n    places: readonly(places),\n    amenities: readonly(amenities),\n    loading: readonly(loading),\n    error: readonly(error),\n    filters,\n    sortBy: readonly(sortBy),\n    stats: readonly(stats),\n    selectedHotel: readonly(selectedHotel),\n    isDrawerOpen: readonly(isDrawerOpen),\n\n    // Pagination State\n    pagination: readonly(pagination),\n    isLoadingMore: readonly(isLoadingMore),\n    hasInitialLoad: readonly(hasInitialLoad),\n\n    // Computed\n    filteredHotels,\n    filteredStats,\n    hasActiveFilters,\n    activeFiltersCount,\n    hotelsByStars,\n    hotelsByPlace,\n    priceStats,\n\n    // Actions - Filtros\n    updateFilters,\n    updatePriceFilter,\n    updateStarsFilter,\n    updateAmenitiesFilter,\n    updateBreakfastFilter,\n    updateRefundableFilter,\n    updatePlaceFilter,\n    updateSearchQuery,\n    addStarFilter,\n    removeStarFilter,\n    addAmenityFilter,\n    removeAmenityFilter,\n\n    // Actions - Ordenação\n    updateSort,\n    sortByPrice,\n    sortByStars,\n    sortByName,\n\n    // Actions - Reset\n    resetFilters,\n    resetPriceFilter,\n    resetStarsFilter,\n    resetAmenitiesFilter,\n    resetSearchQuery,\n\n    // Actions - API\n    fetchInitialData,\n    fetchHotels,\n    fetchStats,\n    searchHotels,\n    performLocalSearch,\n\n    // Actions - Drawer\n    openHotelDrawer,\n    closeHotelDrawer,\n\n    // Actions - Hotel Details\n    fetchHotelById,\n    getHotelDetails,\n\n    // Actions - Utilitários\n    getHotelById,\n    getHotelsByPlace,\n    getHotelsByStars,\n    getHotelsByPriceRange,\n    getHotelsWithAmenity,\n\n    // Actions - Paginação\n    loadMoreHotels,\n    goToPage,\n    resetPagination,\n    updateItemsPerPage,\n\n    // Utilities\n    formatPrice,\n    getAmenityLabel,\n    getPlaceName,\n\n    // City Search\n    citySearchQuery: readonly(citySearchQuery),\n    citySearchResults: readonly(citySearchResults),\n    citySearchLoading: readonly(citySearchLoading),\n    citySearchError: readonly(citySearchError),\n    formattedCityResults: readonly(formattedCityResults),\n    hasCitySearchResults: readonly(hasCitySearchResults),\n    shouldShowCitySearch: readonly(shouldShowCitySearch),\n    updateCitySearchQuery,\n    clearCitySearch,\n    selectCity\n  }\n})\n","<template>\n  <div class=\"filter-dropdown\">\n    <button\n      @click=\"toggleDropdown\"\n      :class=\"['filter-dropdown__trigger', { active: isOpen }]\"\n      type=\"button\"\n    >\n      <i class=\"material-icons\">tune</i>\n      <span>Filtros</span>\n      <i class=\"material-icons filter-dropdown__arrow\">{{ isOpen ? 'expand_less' : 'expand_more' }}</i>\n      <span v-if=\"activeFiltersCount > 0\" class=\"filter-dropdown__badge\">\n        {{ activeFiltersCount }}\n      </span>\n    </button>\n\n    <div v-if=\"isOpen\" class=\"filter-dropdown__content\">\n      <div class=\"filter-dropdown__header\">\n        <h4>Filtros Avançados</h4>\n        <button @click=\"resetAllFilters\" class=\"filter-dropdown__reset\">\n          Limpar\n        </button>\n      </div>\n\n      <div class=\"filter-dropdown__body\">\n        <!-- Price Range -->\n        <div class=\"filter-section\">\n          <h5 class=\"filter-section__title\">Faixa de preço</h5>\n          <div class=\"filter-section__price-range\">\n            <PriceInput\n              v-model=\"localFilters.minPrice\"\n              label=\"Mínimo\"\n              placeholder=\"R$ 0,00\"\n              @update:model-value=\"updatePriceFilterHandler\"\n            />\n            <PriceInput\n              v-model=\"localFilters.maxPrice\"\n              label=\"Máximo\"\n              placeholder=\"R$ 10.000,00\"\n              @update:model-value=\"updatePriceFilterHandler\"\n            />\n          </div>\n        </div>\n\n        <!-- Stars -->\n        <div class=\"filter-section\">\n          <h5 class=\"filter-section__title\">Classificação</h5>\n          <div class=\"filter-section__stars\">\n            <label\n              v-for=\"star in ['5', '4', '3', '2', '1']\"\n              :key=\"star\"\n              class=\"filter-section__star-option\"\n            >\n              <input\n                type=\"checkbox\"\n                :value=\"star\"\n                v-model=\"localFilters.stars\"\n                @change=\"updateStarFilterHandler\"\n                class=\"filter-section__checkbox\"\n              >\n              <span class=\"filter-section__star-label\">\n                <span v-for=\"i in parseInt(star)\" :key=\"i\" class=\"filter-section__star\">★</span>\n                <span v-if=\"parseInt(star) < 5\">\n                  <span v-for=\"i in 5 - parseInt(star)\" :key=\"i\" class=\"filter-section__star filter-section__star--empty\">☆</span>\n                </span>\n              </span>\n            </label>\n          </div>\n        </div>\n\n        <!-- Amenities -->\n        <div class=\"filter-section\">\n          <h5 class=\"filter-section__title\">Comodidades</h5>\n          <div class=\"filter-section__amenities\">\n            <label\n              v-for=\"amenity in amenities\"\n              :key=\"amenity.key\"\n              class=\"filter-section__amenity-option\"\n            >\n              <input\n                type=\"checkbox\"\n                :value=\"amenity.key\"\n                v-model=\"localFilters.amenities\"\n                @change=\"updateAmenityFilterHandler\"\n                class=\"filter-section__checkbox\"\n              >\n              <span class=\"filter-section__amenity-label\">{{ amenity.label }}</span>\n            </label>\n          </div>\n        </div>\n\n        <!-- Features -->\n        <div class=\"filter-section\">\n          <h5 class=\"filter-section__title\">Características</h5>\n          <div class=\"filter-section__features\">\n            <label class=\"filter-section__feature-option\">\n              <input\n                type=\"checkbox\"\n                :checked=\"localFilters.hasBreakFast === true\"\n                @change=\"updateBreakfastFilterHandler\"\n                class=\"filter-section__checkbox\"\n              >\n              <span class=\"filter-section__feature-label\">Café da manhã</span>\n            </label>\n            <label class=\"filter-section__feature-option\">\n              <input\n                type=\"checkbox\"\n                :checked=\"localFilters.hasRefundableRoom === true\"\n                @change=\"updateRefundableFilterHandler\"\n                class=\"filter-section__checkbox\"\n              >\n              <span class=\"filter-section__feature-label\">Quarto reembolsável</span>\n            </label>\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, watch, computed } from 'vue'\nimport type { FilterState, Amenity } from '~/types'\nimport PriceInput from '~/components/PriceInput.vue'\n\nconst store = useHotelsStore()\nconst {\n  filters,\n  amenities,\n  updatePriceFilter,\n  updateStarsFilter,\n  updateAmenitiesFilter,\n  updateBreakfastFilter,\n  updateRefundableFilter,\n  resetFilters\n} = store\n\nconst isOpen = ref(false)\nconst localFilters = ref<FilterState>({ ...filters })\n\n// Watch for external filter changes\nwatch(() => filters, (newFilters) => {\n  localFilters.value = { ...newFilters }\n}, { deep: true })\n\n// Computed para contar filtros ativos\nconst activeFiltersCount = computed(() => {\n  let count = 0\n  if (localFilters.value.minPrice > 0 || localFilters.value.maxPrice < 1000000) count++\n  if (localFilters.value.stars.length > 0) count++\n  if (localFilters.value.amenities.length > 0) count++\n  if (localFilters.value.hasBreakFast !== null) count++\n  if (localFilters.value.hasRefundableRoom !== null) count++\n  if (localFilters.value.placeId !== null) count++\n  if (localFilters.value.searchQuery.trim() !== '') count++\n  return count\n})\n\n// Methods\nconst toggleDropdown = () => {\n  isOpen.value = !isOpen.value\n}\n\nconst closeDropdown = () => {\n  isOpen.value = false\n}\n\nconst updatePriceFilterHandler = () => {\n  updatePriceFilter(localFilters.value.minPrice, localFilters.value.maxPrice)\n}\n\nconst updateStarFilterHandler = () => {\n  updateStarsFilter(localFilters.value.stars)\n}\n\nconst updateAmenityFilterHandler = () => {\n  updateAmenitiesFilter(localFilters.value.amenities)\n}\n\nconst updateBreakfastFilterHandler = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  updateBreakfastFilter(target.checked ? true : null)\n}\n\nconst updateRefundableFilterHandler = (event: Event) => {\n  const target = event.target as HTMLInputElement\n  updateRefundableFilter(target.checked ? true : null)\n}\n\nconst resetAllFilters = () => {\n  resetFilters()\n}\n\n// Click outside to close\nconst handleClickOutside = (event: Event) => {\n  const target = event.target as Element\n  if (!target.closest('.filter-dropdown')) {\n    closeDropdown()\n  }\n}\n\n// Lifecycle\nonMounted(() => {\n  document.addEventListener('click', handleClickOutside)\n})\n\nonUnmounted(() => {\n  document.removeEventListener('click', handleClickOutside)\n})\n</script>\n\n\n","<template>\n  <div class=\"search-header\">\n    <div class=\"tabs\">\n      <button\n        v-for=\"(tab, index) in tabs\"\n        :key=\"index\"\n        :class=\"['tab', { active: activeTab === tab.name }]\"\n        @click=\"selectTab(tab.name)\"\n      >\n        <i :class=\"tab.icon\">{{ getTabIcon(tab.name) }}</i>\n        {{ tab.label }}\n      </button>\n    </div>\n\n    <div class=\"search-container\" v-if=\"activeTab === 'hotel'\">\n      <!-- Barra de busca principal -->\n      <div class=\"search-bar\">\n        <div class=\"search-input-wrapper\">\n          <div class=\"input-icon\">\n            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M21 21L16.514 16.506L21 21ZM19 10.5C19 15.194 15.194 19 10.5 19C5.806 19 2 15.194 2 10.5C2 5.806 5.806 2 10.5 2C15.194 2 19 5.806 19 10.5Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>\n          </div>\n\n          <input\n            v-model=\"searchQuery\"\n            @input=\"handleLocalSearchInput\"\n            @focus=\"setShowSuggestions(true)\"\n            @blur=\"handleLocalBlur\"\n            @keydown=\"handleLocalKeydown\"\n            type=\"text\"\n            placeholder=\"Buscar hotéis, destinos, cidades...\"\n            class=\"search-input\"\n            autocomplete=\"off\"\n          />\n\n          <div v-if=\"isSearching || hotelsStore.citySearchLoading\" class=\"loading-spinner\">\n            <div class=\"spinner\"></div>\n          </div>\n\n          <button\n            v-if=\"searchQuery && !isSearching\"\n            @click=\"clearSearch\"\n            class=\"clear-button\"\n            type=\"button\"\n          >\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path d=\"M18 6L6 18M6 6L18 18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>\n          </button>\n        </div>\n\n        <BaseButton\n          text=\"Buscar\"\n          icon=\"search\"\n          :loading=\"isSearching\"\n          :disabled=\"!searchQuery.trim()\"\n          @click=\"() => performSearch(searchQuery)\"\n        />\n      </div>\n\n      <!-- Filtros rápidos -->\n      <div class=\"quick-filters\" v-if=\"showQuickFilters\">\n        <div class=\"filter-chips\">\n          <button\n            v-for=\"filter in quickFilters\"\n            :key=\"filter.key\"\n            :class=\"['filter-chip', { active: activeQuickFilters.includes(filter.key) }]\"\n            @click=\"toggleQuickFilter(filter.key)\"\n          >\n            <i class=\"material-icons\">{{ filter.icon }}</i>\n            {{ filter.label }}\n          </button>\n\n          <!-- Filtros Avançados Dropdown -->\n          <FilterDropdown />\n        </div>\n      </div>\n\n      <!-- Sugestões de busca -->\n      <div v-if=\"showSuggestions\" class=\"suggestions-dropdown\">\n        <!-- Buscas recentes -->\n        <div v-if=\"recentSearches.length > 0 && !searchQuery\" class=\"suggestions-section\">\n          <div class=\"section-header\">\n            <span>Buscas recentes</span>\n            <button @click=\"clearRecentSearches\" class=\"clear-recent\">Limpar</button>\n          </div>\n          <div class=\"suggestions-list\">\n            <div\n              v-for=\"recent in recentSearches\"\n              :key=\"recent\"\n              class=\"suggestion-item\"\n              @click=\"() => selectSuggestion(recent)\"\n            >\n              <i class=\"material-icons\">history</i>\n              <span>{{ recent }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- Sugestões unificadas -->\n        <div v-if=\"searchQuery\" class=\"suggestions-section\">\n          <div class=\"section-header\">\n            <span>Hotéis, destinos e cidades</span>\n          </div>\n          <div class=\"suggestions-list\">\n            <!-- Loading state -->\n            <div v-if=\"isGeneratingSuggestions || hotelsStore.citySearchLoading\" class=\"loading-suggestions\">\n              <div class=\"spinner\"></div>\n              <span>Buscando sugestões...</span>\n            </div>\n\n            <!-- Sugestões locais -->\n            <div\n              v-if=\"!isGeneratingSuggestions && !hotelsStore.citySearchLoading && searchSuggestions.length > 0\"\n              v-for=\"(suggestion, index) in searchSuggestions\"\n              :key=\"suggestion.id\"\n              :class=\"['suggestion-item', { selected: selectedSuggestionIndex === index }]\"\n              @click=\"() => selectSuggestion(suggestion)\"\n            >\n              <i class=\"material-icons suggestion-icon\" :class=\"getSuggestionIconClass(suggestion.type)\">\n                {{ getSuggestionIcon(suggestion.type) }}\n              </i>\n              <div class=\"suggestion-content\">\n                <span class=\"suggestion-name\">{{ suggestion.name }}</span>\n                <span class=\"suggestion-detail\">{{ suggestion.detail }}</span>\n              </div>\n              <div class=\"suggestion-action\">\n                <span class=\"action-badge\" :class=\"suggestion.action\">\n                  {{ suggestion.action === 'filter' ? 'Filtrar' : 'Buscar' }}\n                </span>\n              </div>\n            </div>\n\n            <!-- Cidades da API -->\n            <div\n              v-if=\"!isGeneratingSuggestions && !hotelsStore.citySearchLoading && hotelsStore.formattedCityResults.length > 0\"\n              v-for=\"(city, index) in hotelsStore.formattedCityResults\"\n              :key=\"`city-${city.placeId}`\"\n              :class=\"['suggestion-item', { selected: selectedSuggestionIndex === searchSuggestions.length + index }]\"\n              @click=\"() => selectCitySuggestion(city)\"\n            >\n              <i class=\"material-icons suggestion-icon icon-city\">location_city</i>\n              <div class=\"suggestion-content\">\n                <span class=\"suggestion-name\">{{ city.displayName }}</span>\n                <span class=\"suggestion-detail\">Buscar hotéis em {{ city.name }}</span>\n              </div>\n              <div class=\"suggestion-action\">\n                <span class=\"action-badge search\">Buscar</span>\n              </div>\n            </div>\n\n            <!-- Estado vazio -->\n            <div v-if=\"!isGeneratingSuggestions && !hotelsStore.citySearchLoading && searchSuggestions.length === 0 && hotelsStore.formattedCityResults.length === 0\" class=\"empty-suggestions\">\n              <i class=\"material-icons\">search_off</i>\n              <span>Nenhuma sugestão encontrada para \"{{ searchQuery }}\"</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- Estado vazio -->\n        <div v-if=\"searchQuery && searchSuggestions.length === 0 && !isSearching\" class=\"suggestions-section\">\n          <div class=\"empty-suggestions\">\n            <i class=\"material-icons\">search_off</i>\n            <span>Nenhum resultado encontrado para \"{{ searchQuery }}\"</span>\n            <BaseButton\n              variant=\"outline\"\n              size=\"small\"\n              text=\"Buscar mesmo assim\"\n              @click=\"() => performSearch(searchQuery)\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref, computed, watch, onMounted } from 'vue'\n\n// Props\ninterface Props {\n  initialTab?: string\n  initialSearch?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  initialTab: 'hotel',\n  initialSearch: ''\n})\n\n// Emits\nconst emit = defineEmits<{\n  tabChange: [tab: string]\n  search: [query: string]\n}>()\n\n// Store\nconst hotelsStore = useHotelsStore()\n\n// State local para busca unificada\nconst searchQuery = ref('')\nconst isSearching = ref(false)\nconst showSuggestions = ref(false)\nconst selectedSuggestionIndex = ref(-1)\nconst recentSearches = ref<string[]>([])\nconst searchSuggestions = ref<Array<{\n  id: string\n  name: string\n  detail: string\n  type: 'hotel' | 'place' | 'city'\n  action: 'search' | 'filter'\n  data?: any\n}>>([])\nconst isGeneratingSuggestions = ref(false)\n\n// Computed\nconst hasRecentSearches = computed(() => recentSearches.value.length > 0)\nconst hasSuggestions = computed(() => searchSuggestions.value.length > 0)\n\n// State\nconst activeTab = ref(props.initialTab)\nconst showQuickFilters = ref(true)\n\n// Filtros rápidos\nconst quickFilters = [\n  { key: 'breakfast', label: 'Café da manhã', icon: 'restaurant' },\n  { key: 'refundable', label: 'Reembolsável', icon: 'money_off' },\n  { key: '5stars', label: '5 estrelas', icon: 'star' },\n  { key: 'wifi', label: 'Wi-Fi', icon: 'wifi' },\n  { key: 'parking', label: 'Estacionamento', icon: 'local_parking' }\n]\n\nconst activeQuickFilters = ref<string[]>([])\n\n// Watch para sincronizar activeQuickFilters com os filtros do store\nwatch(() => hotelsStore.filters, (newFilters) => {\n  // Limpar filtros ativos baseado no estado do store\n  const newActiveFilters: string[] = []\n  \n  if (newFilters.hasBreakFast === true) {\n    newActiveFilters.push('breakfast')\n  }\n  if (newFilters.hasRefundableRoom === true) {\n    newActiveFilters.push('refundable')\n  }\n  if (newFilters.stars.includes('5')) {\n    newActiveFilters.push('5stars')\n  }\n  if (newFilters.amenities.includes('WI_FI')) {\n    newActiveFilters.push('wifi')\n  }\n  if (newFilters.amenities.includes('PARKING')) {\n    newActiveFilters.push('parking')\n  }\n  \n  activeQuickFilters.value = newActiveFilters\n}, { deep: true })\n\nconst tabs = [\n  { name: 'aereo', label: 'Aéreo', icon: 'material-icons' },\n  { name: 'hotel', label: 'Hotel', icon: 'material-icons' },\n  { name: 'carro', label: 'Carro', icon: 'material-icons' },\n  { name: 'onibus', label: 'Ônibus', icon: 'material-icons' },\n]\n\n// Computed\nconst hasActiveFilters = computed(() => activeQuickFilters.value.length > 0)\n\n// Methods\nconst selectTab = (tabName: string) => {\n  activeTab.value = tabName\n  emit('tabChange', tabName)\n}\n\n// Funções de busca unificada\nconst generateSearchSuggestions = async (query: string) => {\n  if (!query.trim()) {\n    searchSuggestions.value = []\n    isGeneratingSuggestions.value = false\n    return\n  }\n\n  isGeneratingSuggestions.value = true\n\n  const searchTerm = query.toLowerCase()\n  const suggestions: Array<{\n    id: string\n    name: string\n    detail: string\n    type: 'hotel' | 'place' | 'city'\n    action: 'search' | 'filter'\n    data?: any\n  }> = []\n\n  try {\n    // 1. Sugestões de hotéis (busca local)\n    hotelsStore.hotels.forEach(hotel => {\n      if (hotel.name.toLowerCase().includes(searchTerm) ||\n          hotel.district.toLowerCase().includes(searchTerm)) {\n        suggestions.push({\n          id: `hotel-${hotel.id}`,\n          name: hotel.name,\n          detail: `${hotel.stars} estrelas • ${hotelsStore.formatPrice(hotel.totalPrice)} • ${hotel.district}`,\n          type: 'hotel',\n          action: 'search',\n          data: hotel\n        })\n      }\n    })\n\n    // 2. Sugestões de lugares (destinos)\n    hotelsStore.places.forEach(place => {\n      if (place.name.toLowerCase().includes(searchTerm) ||\n          place.state.toLowerCase().includes(searchTerm)) {\n        const hotelsInPlace = hotelsStore.getHotelsByPlace(place.id)\n        suggestions.push({\n          id: `place-${place.id}`,\n          name: `${place.name}, ${place.state}`,\n          detail: `${hotelsInPlace.length} hotéis disponíveis`,\n          type: 'place',\n          action: 'filter',\n          data: place\n        })\n      }\n    })\n\n    // 3. Buscar cidades da API se tiver 3+ caracteres\n    if (searchTerm.length >= 3) {\n      hotelsStore.updateCitySearchQuery(searchTerm)\n\n      // Aguardar um pouco para os resultados chegarem\n      await new Promise(resolve => setTimeout(resolve, 300))\n\n      hotelsStore.formattedCityResults.forEach(city => {\n        suggestions.push({\n          id: `city-${city.placeId}`,\n          name: city.displayName,\n          detail: `Buscar hotéis em ${city.name}`,\n          type: 'city',\n          action: 'search',\n          data: city\n        })\n      })\n    }\n\n    // Limitar a 10 sugestões e ordenar por relevância\n    searchSuggestions.value = suggestions\n      .slice(0, 10)\n      .sort((a, b) => {\n        const aStartsWith = a.name.toLowerCase().startsWith(searchTerm)\n        const bStartsWith = b.name.toLowerCase().startsWith(searchTerm)\n\n        if (aStartsWith && !bStartsWith) return -1\n        if (!aStartsWith && bStartsWith) return 1\n\n        const typePriority = { hotel: 3, place: 2, city: 1 }\n        return typePriority[b.type] - typePriority[a.type]\n      })\n\n  } catch (error) {\n    console.error('Erro ao gerar sugestões:', error)\n    searchSuggestions.value = []\n  } finally {\n    isGeneratingSuggestions.value = false\n  }\n}\n\nconst handleLocalSearchInput = () => {\n  // Garantir que as sugestões sejam mostradas\n  if (searchQuery.value.trim()) {\n    setShowSuggestions(true)\n  }\n\n  generateSearchSuggestions(searchQuery.value)\n}\n\nconst addToRecentSearches = (search: string) => {\n  const trimmed = search.trim()\n  if (!trimmed) return\n\n  recentSearches.value = recentSearches.value.filter(s => s !== trimmed)\n  recentSearches.value.unshift(trimmed)\n\n  if (recentSearches.value.length > 5) {\n    recentSearches.value = recentSearches.value.slice(0, 5)\n  }\n\n  localStorage.setItem('recentHotelSearches', JSON.stringify(recentSearches.value))\n}\n\nconst clearRecentSearches = () => {\n  recentSearches.value = []\n  localStorage.removeItem('recentHotelSearches')\n}\n\nconst loadRecentSearches = () => {\n  const saved = localStorage.getItem('recentHotelSearches')\n  if (saved) {\n    try {\n      recentSearches.value = JSON.parse(saved)\n    } catch (error) {\n      console.error('Erro ao carregar buscas recentes:', error)\n    }\n  }\n}\n\nconst performSearch = async (query: string) => {\n  if (!query.trim()) return\n\n  isSearching.value = true\n  addToRecentSearches(query)\n\n  try {\n    const placeSuggestion = searchSuggestions.value.find(\n      s => s.type === 'place' && s.name.toLowerCase().includes(query.toLowerCase())\n    )\n\n    if (placeSuggestion) {\n      const placeId = parseInt(placeSuggestion.id.replace('place-', ''))\n      hotelsStore.updateFilters({ placeId, searchQuery: '' })\n    } else {\n      await hotelsStore.searchHotels(query.trim())\n    }\n  } catch (error) {\n    console.error('Erro na busca:', error)\n  } finally {\n    isSearching.value = false\n    showSuggestions.value = false\n  }\n}\n\nconst clearSearch = () => {\n  searchQuery.value = ''\n  searchSuggestions.value = []\n  showSuggestions.value = false\n  hotelsStore.resetSearchQuery()\n}\n\nconst selectSuggestion = async (suggestion: string | { id: string; name: string; type: string; action: string; data?: any }) => {\n  if (typeof suggestion === 'string') {\n    searchQuery.value = suggestion\n    await performSearch(suggestion)\n  } else {\n    searchQuery.value = suggestion.name\n\n    if (suggestion.action === 'filter' && suggestion.type === 'place') {\n      const placeId = parseInt(suggestion.id.replace('place-', ''))\n      hotelsStore.updateFilters({ placeId, searchQuery: '' })\n      addToRecentSearches(suggestion.name)\n    } else if (suggestion.type === 'city') {\n      await hotelsStore.searchHotels(suggestion.data.name)\n      addToRecentSearches(suggestion.name)\n    } else {\n      await hotelsStore.searchHotels(suggestion.name)\n    }\n  }\n}\n\nconst handleBlur = () => {\n  setTimeout(() => {\n    showSuggestions.value = false\n    selectedSuggestionIndex.value = -1\n  }, 200)\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n  if (!showSuggestions.value) return\n\n  const allSuggestions = searchQuery.value\n    ? [...searchSuggestions.value, ...hotelsStore.formattedCityResults]\n    : recentSearches.value\n\n  switch (event.key) {\n    case 'ArrowDown':\n      event.preventDefault()\n      selectedSuggestionIndex.value = Math.min(selectedSuggestionIndex.value + 1, allSuggestions.length - 1)\n      break\n    case 'ArrowUp':\n      event.preventDefault()\n      selectedSuggestionIndex.value = Math.max(selectedSuggestionIndex.value - 1, -1)\n      break\n    case 'Enter':\n      event.preventDefault()\n      if (selectedSuggestionIndex.value >= 0 && allSuggestions[selectedSuggestionIndex.value]) {\n        const suggestion = allSuggestions[selectedSuggestionIndex.value]\n        if (!suggestion) return\n\n        if (typeof suggestion === 'string') {\n          selectSuggestion(suggestion)\n        } else if ('placeId' in suggestion) {\n          // É uma cidade da API\n          selectCitySuggestion(suggestion)\n        } else {\n          // É uma sugestão local\n          selectSuggestion(suggestion)\n        }\n      } else {\n        performSearch(searchQuery.value)\n      }\n      break\n    case 'Escape':\n      showSuggestions.value = false\n      selectedSuggestionIndex.value = -1\n      break\n  }\n}\n\nconst setShowSuggestions = (show: boolean) => {\n  showSuggestions.value = show\n}\n\nconst selectCitySuggestion = async (city: any) => {\n  searchQuery.value = city.displayName\n  await hotelsStore.searchHotels(city.name)\n  addToRecentSearches(city.displayName)\n  showSuggestions.value = false\n}\n\nconst toggleQuickFilter = (filterKey: string) => {\n  const index = activeQuickFilters.value.indexOf(filterKey)\n  if (index > -1) {\n    activeQuickFilters.value.splice(index, 1)\n  } else {\n    activeQuickFilters.value.push(filterKey)\n  }\n\n  applyQuickFilters()\n}\n\nconst applyQuickFilters = () => {\n  // Obter filtros atuais do store\n  const currentFilters = { ...hotelsStore.filters }\n  \n  // Resetar filtros que podem ser controlados pelos chips\n  currentFilters.hasBreakFast = null\n  currentFilters.hasRefundableRoom = null\n  currentFilters.stars = currentFilters.stars.filter(star => star !== '5')\n  currentFilters.amenities = currentFilters.amenities.filter(amenity => !['WI_FI', 'PARKING'].includes(amenity))\n  \n  // Aplicar filtros ativos dos chips\n  activeQuickFilters.value.forEach(filter => {\n    switch (filter) {\n      case 'breakfast':\n        currentFilters.hasBreakFast = true\n        break\n      case 'refundable':\n        currentFilters.hasRefundableRoom = true\n        break\n      case '5stars':\n        currentFilters.stars.push('5')\n        break\n      case 'wifi':\n        currentFilters.amenities.push('WI_FI')\n        break\n      case 'parking':\n        currentFilters.amenities.push('PARKING')\n        break\n    }\n  })\n\n  hotelsStore.updateFilters(currentFilters)\n}\n\nconst handleLocalBlur = () => {\n  handleBlur()\n}\n\nconst handleLocalKeydown = (event: KeyboardEvent) => {\n  handleKeydown(event)\n}\n\n// Helper function for tab icons\nconst getTabIcon = (tabName: string) => {\n  const iconMap = {\n    'aereo': 'flight',\n    'hotel': 'hotel',\n    'carro': 'directions_car',\n    'onibus': 'directions_bus'\n  }\n  return iconMap[tabName as keyof typeof iconMap] || 'help'\n}\n\n// Helper functions for suggestion icons\nconst getSuggestionIcon = (type: string) => {\n  const iconMap = {\n    'hotel': 'hotel',\n    'place': 'location_on',\n    'city': 'location_city'\n  }\n  return iconMap[type as keyof typeof iconMap] || 'search'\n}\n\nconst getSuggestionIconClass = (type: string) => {\n  const classMap = {\n    'hotel': 'icon-hotel',\n    'place': 'icon-place',\n    'city': 'icon-city'\n  }\n  return classMap[type as keyof typeof classMap] || ''\n}\n\n// Lifecycle\nonMounted(() => {\n  // Carregar buscas recentes do localStorage\n  loadRecentSearches()\n\n  // Se não há dados, tentar carregar\n  if (hotelsStore.hotels.length === 0 && !hotelsStore.loading) {\n    hotelsStore.fetchInitialData()\n  }\n})\n\n// Expose methods for parent components\ndefineExpose({\n  setActiveTab: selectTab,\n  setSearchQuery: (query: string) => {\n    searchQuery.value = query\n  }\n})\n</script>\n\n\n","<template>\n  <div class=\"loading\">\n    <div class=\"loading__spinner\"></div>\n    <p>{{ message }}</p>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  message?: string\n}\n\nwithDefaults(defineProps<Props>(), {\n  message: 'Carregando...'\n})\n</script>\n\n\n","<template>\n  <div class=\"hotel-carousel\">\n    <div class=\"hotel-carousel__container\">\n      <img\n        :src=\"currentImage\"\n        :alt=\"alt\"\n        class=\"hotel-carousel__image\"\n      >\n\n      <!-- Badge de Estrelas -->\n      <div v-if=\"stars\" class=\"hotel-carousel__stars-badge\">\n        <span v-for=\"star in 5\" :key=\"star\" class=\"hotel-carousel__star\">\n          <i v-if=\"star <= parseInt(stars)\" class=\"material-icons\">star</i>\n          <i v-else class=\"material-icons\">star_border</i>\n        </span>\n      </div>\n\n      <!-- Navegação de Imagens no rodapé -->\n      <div v-if=\"images.length > 1\" class=\"hotel-carousel__image-nav\">\n        <button\n          class=\"hotel-carousel__nav-btn hotel-carousel__nav-btn--prev\"\n          @click=\"previousImage\"\n          :disabled=\"currentImageIndex === 0\"\n        >\n          <i class=\"material-icons\">chevron_left</i>\n        </button>\n        <button\n          class=\"hotel-carousel__nav-btn hotel-carousel__nav-btn--next\"\n          @click=\"nextImage\"\n          :disabled=\"currentImageIndex === images.length - 1\"\n        >\n          <i class=\"material-icons\">chevron_right</i>\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  images: string[]\n  alt?: string\n  stars?: string\n  height?: string\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  alt: 'Imagem do hotel',\n  height: '280px'\n})\n\nconst emit = defineEmits<{\n  'image-change': [index: number]\n}>()\n\n// Carousel state\nconst currentImageIndex = ref(0)\n\n// Get current image\nconst currentImage = computed(() => {\n  if (props.images.length === 0) {\n    return ''\n  }\n  return props.images[currentImageIndex.value] || props.images[0] || ''\n})\n\n// Carousel methods\nconst nextImage = () => {\n  if (currentImageIndex.value < props.images.length - 1) {\n    currentImageIndex.value++\n    emit('image-change', currentImageIndex.value)\n  }\n}\n\nconst previousImage = () => {\n  if (currentImageIndex.value > 0) {\n    currentImageIndex.value--\n    emit('image-change', currentImageIndex.value)\n  }\n}\n\n// Keyboard navigation\nconst handleKeydown = (e: KeyboardEvent) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      e.preventDefault()\n      previousImage()\n      break\n    case 'ArrowRight':\n      e.preventDefault()\n      nextImage()\n      break\n  }\n}\n\n// Watch for images changes to reset carousel\nwatch(() => props.images, () => {\n  currentImageIndex.value = 0\n}, { immediate: true })\n\n// Add keyboard listeners\nonMounted(() => {\n  document.addEventListener('keydown', handleKeydown)\n})\n\nonUnmounted(() => {\n  document.removeEventListener('keydown', handleKeydown)\n})\n\n// Expose methods\ndefineExpose({\n  nextImage,\n  previousImage,\n  currentImageIndex: readonly(currentImageIndex)\n})\n</script>\n","<template>\n  <div :class=\"['hotel-card', `hotel-card--${viewMode}`]\">\n    <!-- Seção da Imagem -->\n    <div class=\"hotel-card__image-section\">\n      <HotelCarousel\n        :images=\"hotelImages\"\n        :alt=\"hotel.name\"\n        :stars=\"hotel.stars\"\n        @image-change=\"handleImageChange\"\n      />\n    </div>\n\n    <!-- Seção de Detalhes -->\n    <div class=\"hotel-card__details-section\">\n      <h3 class=\"hotel-card__name\">{{ hotel.name }}</h3>\n      <p class=\"hotel-card__location\">{{ hotel.district }}</p>\n\n      <!-- Ícones de Amenidades -->\n      <div class=\"hotel-card__amenities\">\n        <div class=\"hotel-card__amenity-icon\" title=\"Restaurante\">\n          <i class=\"material-icons\">restaurant</i>\n        </div>\n        <div class=\"hotel-card__amenity-icon\" title=\"Ar Condicionado\">\n          <i class=\"material-icons\">ac_unit</i>\n        </div>\n        <div class=\"hotel-card__amenity-icon\" title=\"Wi-Fi\">\n          <i class=\"material-icons\">wifi</i>\n        </div>\n        <div class=\"hotel-card__amenity-icon\" title=\"Piscina\">\n          <i class=\"material-icons\">pool</i>\n        </div>\n        <div class=\"hotel-card__amenity-icon\" title=\"Acessibilidade\">\n          <i class=\"material-icons\">accessible</i>\n        </div>\n        <div class=\"hotel-card__amenity-icon\" title=\"Bar\">\n          <i class=\"material-icons\">local_bar</i>\n        </div>\n      </div>\n\n      <!-- Recursos Especiais -->\n      <div class=\"hotel-card__features\">\n        <span v-if=\"hotel.hasRefundableRoom\" class=\"hotel-card__feature\">\n          <i class=\"material-icons\">attach_money</i>\n          Reembolsável\n        </span>\n        <span v-if=\"hotel.hasBreakFast\" class=\"hotel-card__feature\">\n          <i class=\"material-icons\">local_cafe</i>\n          Café da manhã\n        </span>\n      </div>\n    </div>\n\n    <!-- Seção de Preços -->\n    <div class=\"hotel-card__pricing-section\">\n      <div class=\"hotel-card__price-label\">Por dia</div>\n\n      <div class=\"hotel-card__main-price\">{{ formatPrice(Math.floor(hotel.totalPrice / 2)) }}</div>\n\n      <div class=\"hotel-card__no-booking-price\">No booking {{ formatPrice(Math.floor(hotel.totalPrice / 2) + 1500) }}</div>\n\n      <!-- Breakdown de Preços -->\n      <div class=\"hotel-card__price-breakdown\">\n        <div class=\"hotel-card__breakdown-row\">\n          <span class=\"hotel-card__breakdown-label\">Diárias</span>\n          <span class=\"hotel-card__breakdown-value\">2x {{ formatPrice(Math.floor(hotel.totalPrice / 2)) }}</span>\n        </div>\n        <div class=\"hotel-card__breakdown-row\">\n          <span class=\"hotel-card__breakdown-label\">Taxas</span>\n          <span class=\"hotel-card__breakdown-value\">2x {{ formatPrice(8000) }}</span>\n        </div>\n        <div class=\"hotel-card__breakdown-row hotel-card__breakdown-row--total\">\n          <span class=\"hotel-card__breakdown-label\">Total</span>\n          <span class=\"hotel-card__breakdown-value\">{{ formatPrice(hotel.totalPrice) }}</span>\n        </div>\n      </div>\n\n      <BaseButton\n        class=\"hotel-card__details-button\"\n        text=\"Ver detalhes\"\n        :loading=\"loading\"\n        @click=\"openHotelDetails\"\n      />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { Hotel } from '~/types'\nimport HotelCarousel from '~/components/HotelCarousel.vue'\n\ninterface Props {\n  hotel: Hotel\n  viewMode?: 'grid' | 'list'\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  viewMode: 'grid'\n})\n\nconst store = useHotelsStore()\nconst { openHotelDrawer, getAmenityLabel, getPlaceName, formatPrice } = store\n\n// State\nconst imageLoading = ref(true)\nconst loading = ref(false)\nconst showSuccess = ref(false)\n\n// Get images array for carousel\nconst hotelImages = computed(() => {\n  // Usar as imagens reais do hotel se disponíveis\n  if (props.hotel.images && Array.isArray(props.hotel.images) && props.hotel.images.length > 0) {\n    return props.hotel.images\n  }\n\n  // Fallback: usar apenas a imagem thumb\n  if (props.hotel.thumb) {\n    return [props.hotel.thumb]\n  }\n\n  // Fallback: imagem padrão\n  return ['https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800']\n})\n\n// Methods\nconst openHotelDetails = async () => {\n  if (loading.value) return\n\n  loading.value = true\n\n  try {\n    // Simulate loading for better UX\n    await new Promise(resolve => setTimeout(resolve, 300))\n    await openHotelDrawer(props.hotel)\n\n    // Show success feedback\n    showSuccess.value = true\n    setTimeout(() => {\n      showSuccess.value = false\n    }, 2000)\n\n  } catch (error) {\n    console.error('Erro ao abrir detalhes do hotel:', error)\n  } finally {\n    loading.value = false\n  }\n}\n\nconst handleImageChange = (index: number) => {\n  // Opcional: você pode adicionar lógica aqui se necessário\n  console.log('Imagem mudou para:', index)\n}\n</script>\n\n\n","<template>\n  <div class=\"empty-state\">\n    <div class=\"empty-state__icon\">\n      <i class=\"material-icons\">{{ icon }}</i>\n    </div>\n    <h3 class=\"empty-state__title\">{{ title }}</h3>\n    <p class=\"empty-state__message\">{{ message }}</p>\n    <BaseButton\n      v-if=\"actionText\"\n      :text=\"actionText\"\n      @click=\"$emit('action')\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\ninterface Props {\n  icon?: string\n  title: string\n  message: string\n  actionText?: string\n}\n\nwithDefaults(defineProps<Props>(), {\n  icon: 'search_off'\n})\n\ndefineEmits<{\n  action: []\n}>()\n</script>\n\n\n","export default {\n  // Configurações do servidor\n  server: {\n    port: process.env.PORT || 3001,\n    host: process.env.HOST || 'localhost'\n  },\n\n  // Configurações da API\n  api: {\n    basePath: '/api',\n    version: '1.0.0',\n    name: 'Onfly Hotels API'\n  },\n\n  // Configurações de CORS\n  cors: {\n    origin: '*',\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    headers: ['Origin', 'X-Requested-With', 'Content-Type', 'Accept', 'Authorization']\n  },\n\n  // Configurações de paginação\n  pagination: {\n    defaultLimit: 10,\n    maxLimit: 100,\n    availableLimits: [10, 20, 50, 100]\n  },\n\n  // Configurações de filtros\n  filters: {\n    price: {\n      min: 0,\n      max: 1000000\n    },\n    stars: ['1', '2', '3', '4', '5'],\n    amenities: [\n      'WI_FI', 'PARKING', 'POOL', 'RESTAURANT', 'FITNESS_CENTER',\n      'ROOM_SERVICE', 'STEAM_ROOM', 'PET_FRIENDLY', 'BAR', 'SPA'\n    ]\n  },\n\n  // Configurações de ordenação\n  sorting: {\n    allowedFields: ['totalPrice', 'dailyPrice', 'stars', 'name', 'district'],\n    defaultField: 'totalPrice',\n    defaultOrder: 'asc'\n  },\n\n  // Configurações de cache\n  cache: {\n    enabled: false,\n    ttl: 300 // 5 minutos\n  },\n\n  // Configurações de logging\n  logging: {\n    enabled: true,\n    level: 'info',\n    format: 'timestamp method url query'\n  }\n}\n","<template>\n  <div class=\"items-per-page\">\n    <div class=\"items-per-page__label\">\n      <span>Mostrar</span>\n    </div>\n\n    <div class=\"items-per-page__select\">\n      <select\n        :value=\"currentLimit\"\n        @change=\"handleLimitChange\"\n        class=\"items-per-page__dropdown\"\n      >\n        <option\n          v-for=\"limit in availableLimits\"\n          :key=\"limit\"\n          :value=\"limit\"\n        >\n          {{ limit }} hotéis\n        </option>\n      </select>\n    </div>\n\n    <div class=\"items-per-page__info\">\n      <span>por página</span>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport config from '~/data/config.js'\n\ninterface Props {\n  currentLimit: number\n}\n\nconst props = defineProps<Props>()\n\nconst store = useHotelsStore()\nconst { updateItemsPerPage } = store\n\n// Limites disponíveis baseados na configuração\nconst availableLimits = computed(() => config.pagination.availableLimits)\n\nconst handleLimitChange = async (event: Event) => {\n  const target = event.target as HTMLSelectElement\n  const newLimit = parseInt(target.value)\n\n  if (newLimit !== props.currentLimit) {\n    await updateItemsPerPage(newLimit)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.items-per-page {\n  display: flex;\n  align-items: center;\n  gap: $spacing-8;\n  padding: $spacing-16;\n\n  &__label,\n  &__info {\n    font-size: 14px;\n    color: #64748b;\n    font-weight: 500;\n  }\n\n  &__select {\n    position: relative;\n  }\n\n  &__dropdown {\n    appearance: none;\n    background: white;\n    border: 1px solid #e2e8f0;\n    border-radius: $border-radius-6;\n    padding: $spacing-8 $spacing-12;\n    font-size: 14px;\n    font-weight: 500;\n    color: #374151;\n    cursor: pointer;\n    min-width: 100px;\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\n    background-position: right 8px center;\n    background-repeat: no-repeat;\n    background-size: 16px;\n    padding-right: 32px;\n\n    &:hover {\n      border-color: $primary-100;\n    }\n\n    &:focus {\n      outline: none;\n      border-color: $primary-100;\n      box-shadow: 0 0 0 3px rgba(0, 158, 251, 0.1);\n    }\n\n    option {\n      font-size: 14px;\n      padding: $spacing-4;\n    }\n  }\n}\n\n// Responsive\n@media (max-width: $breakpoint-sm) {\n  .items-per-page {\n    padding: $spacing-12;\n    gap: $spacing-6;\n\n    &__label,\n    &__info {\n      font-size: 13px;\n    }\n\n    &__dropdown {\n      min-width: 80px;\n      padding: $spacing-6 $spacing-8;\n      font-size: 13px;\n    }\n  }\n}\n</style>\n","<template>\n  <div v-if=\"pagination.totalPages > 1\" class=\"pagination\">\n    <div class=\"pagination__header\">\n      <div class=\"pagination__info\">\n        <span class=\"pagination__text\">\n          Mostrando {{ startItem }}-{{ endItem }} de {{ pagination.total }} hotéis\n        </span>\n      </div>\n\n      <!-- Seletor de itens por página -->\n      <ItemsPerPageSelector :current-limit=\"pagination.limit\" />\n    </div>\n\n    <div class=\"pagination__controls\">\n      <!-- Botão Anterior -->\n      <button\n        :disabled=\"pagination.currentPage === 1\"\n        @click=\"goToPage(pagination.currentPage - 1)\"\n        class=\"pagination__btn pagination__btn--prev\"\n        title=\"Página anterior\"\n      >\n        <i class=\"material-icons\">chevron_left</i>\n      </button>\n\n      <!-- Páginas -->\n      <div class=\"pagination__pages\">\n        <!-- Primeira página -->\n        <button\n          v-if=\"showFirstPage\"\n          @click=\"goToPage(1)\"\n          :class=\"['pagination__page', { active: pagination.currentPage === 1 }]\"\n        >\n          1\n        </button>\n\n        <!-- Separador inicial -->\n        <span v-if=\"showFirstSeparator\" class=\"pagination__separator\">...</span>\n\n        <!-- Páginas do meio -->\n        <button\n          v-for=\"page in visiblePages\"\n          :key=\"page\"\n          @click=\"goToPage(page)\"\n          :class=\"['pagination__page', { active: pagination.currentPage === page }]\"\n        >\n          {{ page }}\n        </button>\n\n        <!-- Separador final -->\n        <span v-if=\"showLastSeparator\" class=\"pagination__separator\">...</span>\n\n        <!-- Última página -->\n        <button\n          v-if=\"showLastPage\"\n          @click=\"goToPage(pagination.totalPages)\"\n          :class=\"['pagination__page', { active: pagination.currentPage === pagination.totalPages }]\"\n        >\n          {{ pagination.totalPages }}\n        </button>\n      </div>\n\n      <!-- Botão Próximo -->\n      <button\n        :disabled=\"pagination.currentPage === pagination.totalPages\"\n        @click=\"goToPage(pagination.currentPage + 1)\"\n        class=\"pagination__btn pagination__btn--next\"\n        title=\"Próxima página\"\n      >\n        <i class=\"material-icons\">chevron_right</i>\n      </button>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { PaginationInfo } from '~/types'\n\ninterface Props {\n  pagination: PaginationInfo\n}\n\nconst props = defineProps<Props>()\n\nconst store = useHotelsStore()\nconst { goToPage } = store\n\n// Computed properties para cálculos de paginação\nconst startItem = computed(() => {\n  return props.pagination.offset + 1\n})\n\nconst endItem = computed(() => {\n  return Math.min(props.pagination.offset + props.pagination.limit, props.pagination.total)\n})\n\n// Lógica para mostrar páginas com elipses\nconst maxVisiblePages = 5\nconst showFirstPage = computed(() => {\n  return props.pagination.currentPage > 3\n})\n\nconst showLastPage = computed(() => {\n  return props.pagination.currentPage < props.pagination.totalPages - 2\n})\n\nconst showFirstSeparator = computed(() => {\n  return props.pagination.currentPage > 4\n})\n\nconst showLastSeparator = computed(() => {\n  return props.pagination.currentPage < props.pagination.totalPages - 3\n})\n\nconst visiblePages = computed(() => {\n  const pages: number[] = []\n  const totalPages = props.pagination.totalPages\n  const currentPage = props.pagination.currentPage\n\n  if (totalPages <= maxVisiblePages) {\n    // Mostrar todas as páginas se houver 5 ou menos\n    for (let i = 1; i <= totalPages; i++) {\n      pages.push(i)\n    }\n  } else {\n    // Lógica para mostrar páginas com elipses\n    let start = Math.max(1, currentPage - 2)\n    let end = Math.min(totalPages, currentPage + 2)\n\n    // Ajustar para mostrar sempre 5 páginas quando possível\n    if (currentPage <= 3) {\n      end = Math.min(totalPages, 5)\n    } else if (currentPage >= totalPages - 2) {\n      start = Math.max(1, totalPages - 4)\n    }\n\n    for (let i = start; i <= end; i++) {\n      pages.push(i)\n    }\n  }\n\n  return pages\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.pagination {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: $spacing-16;\n  padding: $spacing-24;\n  margin-top: $spacing-24;\n\n  &__header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    gap: $spacing-16;\n  }\n\n  &__info {\n    text-align: left;\n  }\n\n  &__text {\n    font-size: 14px;\n    color: #64748b;\n    font-weight: 500;\n  }\n\n  &__controls {\n    display: flex;\n    align-items: center;\n    gap: $spacing-8;\n  }\n\n  &__btn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 40px;\n    height: 40px;\n    border: 1px solid #e2e8f0;\n    background: white;\n    border-radius: $border-radius-8;\n    color: #64748b;\n    cursor: pointer;\n    transition: all 0.2s ease;\n\n    &:hover:not(:disabled) {\n      border-color: $primary-100;\n      color: $primary-100;\n      background: #f0f9ff;\n    }\n\n    &:disabled {\n      opacity: 0.5;\n      cursor: not-allowed;\n    }\n\n    i {\n      font-size: 20px;\n    }\n  }\n\n  &__pages {\n    display: flex;\n    align-items: center;\n    gap: $spacing-4;\n  }\n\n  &__page {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 40px;\n    height: 40px;\n    padding: 0 $spacing-8;\n    border: 1px solid #e2e8f0;\n    background: white;\n    border-radius: $border-radius-8;\n    color: #64748b;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n\n    &:hover {\n      border-color: $primary-100;\n      color: $primary-100;\n      background: #f0f9ff;\n    }\n\n    &.active {\n      background: $primary-100;\n      border-color: $primary-100;\n      color: white;\n    }\n  }\n\n  &__separator {\n    color: #94a3b8;\n    font-weight: 500;\n    padding: 0 $spacing-4;\n  }\n}\n\n// Responsive\n@media (max-width: $breakpoint-sm) {\n  .pagination {\n    padding: $spacing-16;\n\n    &__header {\n      flex-direction: column;\n      gap: $spacing-12;\n      align-items: stretch;\n    }\n\n    &__info {\n      text-align: center;\n    }\n\n    &__controls {\n      gap: $spacing-4;\n    }\n\n    &__btn,\n    &__page {\n      width: 36px;\n      height: 36px;\n      min-width: 36px;\n    }\n  }\n}\n</style>\n","<template>\n  <div v-if=\"pagination.hasMore\" class=\"load-more\">\n    <BaseButton\n      variant=\"outline\"\n      text=\"Carregar mais hotéis\"\n      icon=\"expand_more\"\n      :loading=\"isLoading\"\n      :disabled=\"isLoading\"\n      @click=\"loadMore\"\n    />\n\n    <div class=\"load-more__info\">\n      <span class=\"load-more__text\">\n        Mostrando {{ currentCount }} de {{ pagination.total }} hotéis\n      </span>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { PaginationInfo } from '~/types'\n\ninterface Props {\n  pagination: PaginationInfo\n  isLoading?: boolean\n}\n\nconst props = withDefaults(defineProps<Props>(), {\n  isLoading: false\n})\n\nconst store = useHotelsStore()\nconst { loadMoreHotels } = store\n\nconst currentCount = computed(() => {\n  return Math.min(props.pagination.offset + props.pagination.limit, props.pagination.total)\n})\n\nconst loadMore = async () => {\n  await loadMoreHotels()\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.load-more {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: $spacing-16;\n  padding: $spacing-24;\n  margin-top: $spacing-24;\n\n  &__btn {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    min-width: 200px;\n    height: 48px;\n    padding: 0 $spacing-24;\n    border: 2px solid $primary-100;\n    background: white;\n    border-radius: $border-radius-12;\n    color: $primary-100;\n    font-weight: 600;\n    font-size: 16px;\n    cursor: pointer;\n    transition: all 0.2s ease;\n\n    &:hover:not(:disabled) {\n      background: $primary-100;\n      color: white;\n      transform: translateY(-1px);\n      box-shadow: 0 4px 12px rgba(0, 158, 251, 0.3);\n    }\n\n    &:disabled {\n      opacity: 0.7;\n      cursor: not-allowed;\n      transform: none;\n    }\n\n    &:active:not(:disabled) {\n      transform: translateY(0);\n    }\n  }\n\n  &__loading {\n    display: flex;\n    align-items: center;\n    gap: $spacing-8;\n  }\n\n  &__content {\n    display: flex;\n    align-items: center;\n    gap: $spacing-8;\n  }\n\n  &__spinner {\n    width: 20px;\n    height: 20px;\n    border: 2px solid transparent;\n    border-top: 2px solid currentColor;\n    border-radius: 50%;\n    animation: spin 1s linear infinite;\n  }\n\n  &__info {\n    text-align: center;\n  }\n\n  &__text {\n    font-size: 14px;\n    color: #64748b;\n    font-weight: 500;\n  }\n\n  i {\n    font-size: 20px;\n  }\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n\n// Responsive\n@media (max-width: $breakpoint-sm) {\n  .load-more {\n    padding: $spacing-16;\n\n    &__btn {\n      min-width: 180px;\n      height: 44px;\n      font-size: 15px;\n    }\n  }\n}\n</style>\n","<template>\n  <!-- Overlay -->\n  <div\n    v-if=\"isOpen\"\n    class=\"hotel-drawer-overlay\"\n    @click=\"closeDrawer\"\n  ></div>\n\n  <!-- Drawer -->\n  <div\n    :class=\"['hotel-drawer', { 'hotel-drawer--open': isOpen }]\"\n  >\n    <template v-if=\"hotel\">\n      <div class=\"hotel-drawer__content\">\n        <!-- Header -->\n        <div class=\"hotel-drawer__header\">\n          <h2 class=\"hotel-drawer__title\">{{ hotel.name }}</h2>\n          <button\n            @click=\"closeDrawer\"\n            class=\"hotel-drawer__close\"\n            aria-label=\"Fechar detalhes\"\n          >\n            <i class=\"material-icons\">close</i>\n          </button>\n        </div>\n\n        <!-- Image Section with Carousel (same as HotelCard) -->\n        <div class=\"hotel-drawer__image-section\">\n          <HotelCarousel\n            :images=\"images\"\n            :alt=\"hotel.name\"\n            :stars=\"hotel.stars\"\n            @image-change=\"handleImageChange\"\n          />\n        </div>\n\n        <!-- Comodidades Section -->\n        <div class=\"hotel-drawer__section\">\n          <h3 class=\"hotel-drawer__section-title\">Comodidades</h3>\n          <div class=\"hotel-drawer__amenities-list\">\n            <div\n              v-for=\"amenity in hotel.amenities\"\n              :key=\"amenity\"\n              class=\"hotel-drawer__amenity-item\"\n            >\n              <i :class=\"`material-icons ${getAmenityIcon(amenity)}`\" class=\"hotel-drawer__amenity-icon\"></i>\n              <span class=\"hotel-drawer__amenity-label\">{{ getAmenityLabel(amenity) }}</span>\n            </div>\n          </div>\n        </div>\n\n        <!-- Localização Section -->\n        <div class=\"hotel-drawer__section\">\n          <h3 class=\"hotel-drawer__section-title\">Localização</h3>\n          <p class=\"hotel-drawer__address\">{{ getFullAddress(hotel) }}</p>\n        </div>\n\n        <!-- Sobre o Hotel Section -->\n        <div class=\"hotel-drawer__section\">\n          <h3 class=\"hotel-drawer__section-title\">Sobre o {{ hotel.name }}</h3>\n          <p class=\"hotel-drawer__description\">{{ hotel.description }}</p>\n        </div>\n      </div>\n    </template>\n\n    <template v-else>\n      <!-- Loading State -->\n      <div class=\"hotel-drawer__loading\">\n        <div class=\"hotel-drawer__spinner\"></div>\n        <p>Carregando detalhes...</p>\n      </div>\n    </template>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { Hotel } from '~/types'\nimport HotelCarousel from '~/components/HotelCarousel.vue'\n\ninterface Props {\n  modelValue: boolean\n  hotel: Hotel | null\n}\n\nconst props = defineProps<Props>()\n\nconst emit = defineEmits<{\n  'update:modelValue': [value: boolean]\n}>()\n\nconst store = useHotelsStore()\nconst { getAmenityLabel, getPlaceName, closeHotelDrawer } = store\n\n// Computed\nconst isOpen = computed({\n  get: () => props.modelValue,\n  set: (value) => emit('update:modelValue', value)\n})\n\n// Get images array\nconst images = computed(() => {\n  if (!props.hotel) {\n    return []\n  }\n\n  // Usar as imagens reais do hotel se disponíveis\n  if (props.hotel.images && Array.isArray(props.hotel.images) && props.hotel.images.length > 0) {\n    return props.hotel.images\n  }\n\n  // Fallback: usar apenas a imagem thumb\n  if (props.hotel.thumb) {\n    return [props.hotel.thumb]\n  }\n\n  // Fallback: imagem padrão\n  return ['https://images.unsplash.com/photo-1566073771259-6a8506099945?w=800']\n})\n\n// Methods\nconst closeDrawer = () => {\n  closeHotelDrawer()\n}\n\nconst handleImageChange = (index: number) => {\n  // Opcional: você pode adicionar lógica aqui se necessário\n  console.log('Imagem mudou para:', index)\n}\n\nconst getAmenityIcon = (amenity: string): string => {\n  const iconMap: Record<string, string> = {\n    'WI_FI': 'wifi',\n    'PARKING': 'local_parking',\n    'POOL': 'pool',\n    'RESTAURANT': 'restaurant',\n    'FITNESS_CENTER': 'fitness_center',\n    'ROOM_SERVICE': 'room_service',\n    'STEAM_ROOM': 'hot_tub',\n    'PET_FRIENDLY': 'pets',\n    'BAR': 'local_bar',\n    'SPA': 'spa',\n    'ACCESSIBILITY': 'accessible',\n    'AIR_CONDITIONING': 'ac_unit'\n  }\n  return iconMap[amenity] || 'check'\n}\n\nconst getFullAddress = (hotel: Hotel): string => {\n  const place = store.places.find(p => p.id === hotel.placeId)\n  if (place) {\n    return `${hotel.district}, ${place.name}, ${place.state}`\n  }\n  return hotel.district\n}\n\n// Keyboard navigation\nconst handleKeydown = (e: KeyboardEvent) => {\n  if (!isOpen.value) return\n\n  switch (e.key) {\n    case 'Escape':\n      e.preventDefault()\n      closeDrawer()\n      break\n  }\n}\n\n// Add keyboard listeners\nonMounted(() => {\n  document.addEventListener('keydown', handleKeydown)\n})\n\nonUnmounted(() => {\n  document.removeEventListener('keydown', handleKeydown)\n})\n</script>\n\n\n","import { ref, computed } from 'vue'\nimport type { Hotel, SortOption } from '~/types'\n\nexport const useHotelPage = () => {\n  const store = useHotelsStore()\n\n  // Sort handling\n  const sortKey = ref('price-asc')\n\n  const sortOptions = [\n    { value: 'price-asc', label: 'Menor preço' },\n    { value: 'price-desc', label: 'Maior preço' },\n    { value: 'stars-desc', label: 'Melhor classificação' },\n    { value: 'name-asc', label: 'Nome A-Z' }\n  ]\n\n  const handleSortChange = () => {\n    const sortMap = {\n      'price-asc': { key: 'totalPrice', label: 'Preço', direction: 'asc' as const },\n      'price-desc': { key: 'totalPrice', label: 'Preço', direction: 'desc' as const },\n      'stars-desc': { key: 'stars', label: 'Classificação', direction: 'desc' as const },\n      'name-asc': { key: 'name', label: 'Nome', direction: 'asc' as const }\n    }\n\n    store.updateSort(sortMap[sortKey.value as keyof typeof sortMap])\n  }\n\n  // Header component handlers\n  const handleTabChange = (tab: string) => {\n    console.log('Tab changed to:', tab)\n    // Handle tab change logic here\n  }\n\n  const handleSearch = (query: string) => {\n    store.updateFilters({ searchQuery: query })\n  }\n\n  // Computed properties for better organization\n  const pageState = computed(() => ({\n    loading: store.loading,\n    error: store.error,\n    hasHotels: store.hotels.length > 0\n  }))\n\n  return {\n    // Store\n    store,\n\n    // Sort\n    sortKey,\n    sortOptions,\n    handleSortChange,\n\n    // Handlers\n    handleTabChange,\n    handleSearch,\n\n    // Computed\n    pageState\n  }\n}\n","<template>\n  <div class=\"hotels-page\">\n    <div class=\"container\">\n      <!-- Hotel Header Component -->\n      <HotelHeader\n        @tab-change=\"handleTabChange\"\n        @search=\"handleSearch\"\n      />\n\n      <!-- Loading State -->\n      <LoadingState\n        v-if=\"pageState.loading\"\n        message=\"Carregando hotéis...\"\n      />\n\n      <!-- Error State -->\n      <div v-else-if=\"pageState.error\" class=\"error\">\n        <p>{{ pageState.error }}</p>\n        <button class=\"btn btn--primary\" @click=\"store.fetchInitialData\">Tentar novamente</button>\n      </div>\n\n      <!-- Main Content -->\n      <div v-else class=\"hotels-page__content\">\n        <!-- Hotels Section -->\n        <section class=\"hotels-section\">\n          <!-- Controles de ordenamento entre os componentes -->\n          <div class=\"sorting-controls\">\n            <div class=\"minimal-controls\">\n              <div class=\"controls-group\">\n                <select\n                  v-model=\"sortKey\"\n                  @change=\"handleSortChange\"\n                  class=\"sort-select\"\n                >\n                  <option\n                    v-for=\"option in sortOptions\"\n                    :key=\"option.value\"\n                    :value=\"option.value\"\n                  >\n                    {{ option.label }}\n                  </option>\n                </select>\n\n                <div class=\"view-toggle\">\n                  <button\n                    :class=\"['toggle-btn', { active: viewMode === 'grid' }]\"\n                    @click=\"viewMode = 'grid'\"\n                    title=\"Grade\"\n                  >\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M3 3H10V10H3V3ZM3 14H10V21H3V14ZM14 3H21V10H14V3ZM14 14H21V21H14V14Z\" fill=\"currentColor\"/>\n                    </svg>\n                  </button>\n                  <button\n                    :class=\"['toggle-btn', { active: viewMode === 'list' }]\"\n                    @click=\"viewMode = 'list'\"\n                    title=\"Lista\"\n                  >\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                      <path d=\"M3 13H5V11H3V13ZM3 17H5V15H3V17ZM3 9H5V7H3V9ZM7 13H21V11H7V13ZM7 17H21V15H7V17ZM7 7V9H21V7H7Z\" fill=\"currentColor\"/>\n                    </svg>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Contador de resultados -->\n          <!-- <ResultsCounter\n            v-if=\"store.hasInitialLoad\"\n            :total-results=\"store.pagination.total\"\n            :filters=\"store.filters\"\n            :places=\"store.places\"\n            :amenities=\"store.amenities\"\n          />  -->\n\n          <!-- Card principal que envolve apenas a lista de hotéis -->\n          <div class=\"hotels-card\">\n            <!-- Conteúdo do card com a lista de hotéis -->\n            <div class=\"hotels-card__content\">\n              <!-- Hotels Grid/List -->\n              <div v-if=\"pageState.hasHotels\" :class=\"['hotels-container', `hotels-${viewMode}`]\">\n                <HotelCard\n                  v-for=\"hotel in store.hotels\"\n                  :key=\"hotel.id\"\n                  :hotel=\"hotel\"\n                  :view-mode=\"viewMode\"\n                />\n              </div>\n\n              <!-- Empty State -->\n              <EmptyState\n                v-else\n                title=\"Nenhum hotel encontrado\"\n                message=\"Tente ajustar os filtros para encontrar mais opções\"\n                action-text=\"Limpar filtros\"\n                @action=\"store.resetFilters\"\n              />\n\n              <!-- Paginação Desktop -->\n              <Pagination\n                v-if=\"store.pagination.total > 0 && !isMobile\"\n                :pagination=\"store.pagination\"\n                class=\"pagination-desktop\"\n              />\n\n              <!-- Load More Mobile -->\n              <LoadMoreButton\n                v-if=\"store.pagination.total > 0 && store.pagination.hasMore && isMobile && store.pagination.total > store.pagination.limit\"\n                :pagination=\"store.pagination\"\n                :is-loading=\"store.isLoadingMore\"\n                class=\"load-more-mobile\"\n              />\n\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n\n    <!-- Hotel Details Drawer -->\n    <HotelDrawer\n      v-model=\"store.isDrawerOpen\"\n      :hotel=\"store.selectedHotel as Hotel | null\"\n    />\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { onMounted, ref } from 'vue'\nimport type { Hotel } from '~/types'\n\n// Use the composable for better organization\nconst {\n  store,\n  sortKey,\n  sortOptions,\n  handleSortChange,\n  handleTabChange,\n  handleSearch,\n  pageState\n} = useHotelPage()\n\n// View mode state\nconst viewMode = ref<'grid' | 'list'>('grid')\n\n// Mobile detection\nconst isMobile = ref(false)\n\nconst checkMobile = () => {\n  isMobile.value = window.innerWidth <= 768 // $breakpoint-md\n}\n\n// Fetch data on mount\nonMounted(() => {\n  console.log('🚀 Componente montado, iniciando carregamento...')\n\n  // Detectar dispositivo imediatamente\n  checkMobile()\n\n  // Adicionar listener para resize\n  window.addEventListener('resize', checkMobile)\n\n  // Carregar dados\n  store.fetchInitialData()\n})\n\nonUnmounted(() => {\n  window.removeEventListener('resize', checkMobile)\n})\n</script>\n\n\n"],"names":["_unref","disabled","loading","icon","showText","text","_ssrRenderAttrs","_mergeProps","label","_ssrRenderAttr","placeholder","inputClass","filters","sortBy","resetPagination","amenities","filteredHotels","error","_ssrRenderList","_ssrIncludeBooleanAttr","_ssrLooseContain","_ssrInterpolate","_ssrRenderClass","message","alt","stars","images","viewMode","hotel","title","actionText","$emit","currentLimit","pagination","isLoading","_ssrRenderComponent"],"mappings":"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"}